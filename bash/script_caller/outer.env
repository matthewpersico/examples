





























































					git describe --contains --all HEAD ;;
					git describe --contains HEAD ;;
					git describe --tags --exact-match HEAD ;;
					git describe --tags HEAD ;;
					git describe HEAD ;;
				(* | default)
				(branch)
				(contains)
				(describe)
				(tag)
				case "${GIT_PS1_DESCRIBE_STYLE-}" in
				esac 2>/dev/null)" || b="$short_sha...";
                                             sed "s|$DIRLIST_PWD_INDIC||" |
                                             sed "s|~|${TILDAE:-$HOME}|");
                                        echo "'$REPLY' is an invalid choice";
                                        git-go "${REPLY#/}";
                                        return $?;
                                    else
                                    fi;
                                    if [[ "$REPLY" =~ ^/ ]]; then
                                    return;
                                  /usr/bin/nohup ${XTERM} -title ${host}                                                  ${XARGS} >> ~/inlog 2>&1 &
                                  DISPLAY=$DISPLAY
                                  PATH=$PATH:/usr/bin/X11
                                  export PATH DISPLAY
                                  xauth add ${XCOOKIE} >> ~/inlog 2>&1
                                 )" &
                                REPO=$(tail_number_strip "$REPO");
                                REPO=$r;
                                [ -n "$gse" ] && echo "    $gse";
                                [ -n "$sched" ] && echo "    Scheduled for removal on or after $sched";
                                [[ "$r" =~ $opt_repo_sel ]] && REPOSTMP+=("$r");
                                break;
                                echo "$rr:";
                                echo;
                                else
                                fi;
                                if [ "$(echo "$REPLY" | tr '[:upper:]' '[:lower]')" = 'q' ]; then
                                return;
                            (( i=i+1 ));
                            ((opt_repo_no-=1));
                            ((optimized+=1));
                            REPOS=("${REPOSTMP[@]}");
                            [ -n "$sched" ] && sched=$(date --date "@${sched}");
                            addin="${dirname}${sep}${line}";
                            addin="${line}";
                            andevaled=', optimized';
                            builtin cd $d;
                            do
                            done;
                            doshim=0;
                            echo "$rr";
                            else
                            fi;
                            fi;
                            fi;
                            fi;
                            for r in "${REPOS[@]}";
                            git-branch-info delete-worktree);
                            gse=$(cd "${TILDAE:-$HOME}/$r" || (echo "Cannot cd ${TILDAE:-$HOME}/$r" && return "$NOT_OK");
                            if ((opt_list)); then
                            if ((opt_repo_no == 0)); then
                            if [ -n "$REPO" ]; then
                            if [ -n "$gse" ] || [ -n "$sched" ]; then
                            local -a REPOSTMP;
                            local d=$(echo ${DIRLISTA[(tgt-1)]} |
                            local r;
                            r="|BISECTING";
                            sched=$(cd "${TILDAE:-$HOME}/$r" || (echo "Cannot cd ${TILDAE:-$HOME}/$r" && return "$NOT_OK");
                            stderrcho $tgt is not a valid choice;
                            tgtdir=$(dirname $tgtdir);
                          git-branch-info local-status);
                        '$brandtext'
                        '$func' "$@"
                        ((ahead++))
                        ((behind++))
                        ((idx+=1));
                        ((opt_list==1)) && rr="~/${r}";
                        ((opt_list==2)) && rr="${TILDAE:-$HOME}/${r}";
                        . $file
                        AUTOLOAD_SHIM_OVERHEAD=$(type $func | grep -v -E "^$1 is a function" | sed "s/$func//g"| wc -c);
                        COLUMNS=1;
                        REPO=${REPOS[0]};
                        [ -n "$newvalue" ] && newvalue="${newvalue}${sep}${addin}" || newvalue="${addin}";
                        _dirlist_select $FILTERED_DIRLIST;
                        builtin cd $tgtdir;
                        do
                        do
                        done;
                        done;
                        done;
                        echo "$tgt not found";
                        echo "Matches only ${REPOS[0]}. Going there.";
                        echo;
                        else
                        else
                        else
                        export AUTOLOAD_SHIM_OVERHEAD;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        for r in "${REPOS[@]}";
                        func-echo "$r";
                        git st;
                        if (( size <= shimsize)); then
                        if ((!opt_gse)); then
                        if ((idx != opt_i)); then
                        if ((tgt>${#DIRLISTA[@]})) || ((tgt==0)); then
                        if [ -f "$g/BISECT_LOG" ]; then
                        if [ -n "$opt_repo_sel" ]; then
                        local DIRLISTA=($DIRLIST);
                        local i=$tgt;
                        local r;
                        local shimsize=$(autoload_calc_shimsize $func);
                        local size=$(wc -c $funcfile| sed 's/ .*//');
                        local tgtdir=$(pwd);
                        r="|REVERTING";
                        readarray -t REPOS < <(tail_number_add "${REPOS[@]}");
                        return $?
                        return 1;
                        select REPO in "${REPOS[@]}";
                        while (( i < 0 )); do
                    "<"*)
                    ( cd "${TILDAE:-$HOME}/$r" || ( echo "Cannot cd ${TILDAE:-$HOME}/$r" && return "$NOT_OK" );
                    ((doexport)) && export -f $func && andexported=', exported' && ((exported+=1));
                    ((doverbose)) && echo "$func autoloaded${andexported}${andevaled}";
                    ((loaded+=1));
                    ((opt_i-=1));
                    *)
                    . $funcfile;
                    ;;
                    ;;
                    TEMP=$(mktemp --suffix=.addpath);
                    Usage "${USAGE[@]}" "Too many arguments";
                    andevaled=', evaled';
                    b="$(
                    b="($b)";
                    detached=yes;
                    do
                    done < $TEMP;
                    done;
                    doshim=0;
                    echo "$func failed to load" 1>&2;
                    echo "'$@' will all be ignored" 1>&2;
                    echo "-w processes only one function name" 1>&2;
                    else
                    else
                    else
                    else
                    else
                    else
                    eval "$brandtext";
                    eval $func '()
                    fi
                    fi );
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    for r in "${REPOS[@]}";
                    i="#";
                    if (( $(git st --porcelain | wc  -l) )); then
                    if (( $? == 0 )); then
                    if ((${#REPOS[@]}==1)); then
                    if ((opt_repo_no)); then
                    if [ -f "$g/REVERT_HEAD" ]; then
                    if [ -n "$FILTERED_DIRLIST" ]; then
                    if [[ ! -n $AUTOLOAD_SHIM_OVERHEAD ]] && ((doshim)); then
                    if [[ $file ]]
                    if [[ -n $AUTOLOAD_SHIM_OVERHEAD ]]; then
                    is-neg $tgt;
                    listpath -s "${sep}" -p $pathvar | grep --color=auto --color=auto -v $MATCH "$delit" > $TEMP;
                    local FILTERED_DIRLIST=$(echo $DIRLIST | tr ' ' '\n' | grep $tgt );
                    local IS_SHIM="$func"
                    local REPO;
                    local addin;
                    local file=$(_autoload_resolve '$func')
                    local gse;
                    local idx=0;
                    local line;
                    local newvalue;
                    local r;
                    local rr;
                    local sched;
                    newvalue="${oldvalue}${sep}${dirname}";
                    p="";
                    r="|AM";
                    r="|AM/REBASE";
                    r="|CHERRY-PICKING";
                    return $exit;
                    return;
                    rm -rf $TEMP;
                    svn_upstream=${svn_upstream#${svn_remote[$n]}};
                    then
                    upstream="@{upstream}";
                    upstream=${GIT_SVN_ID:-git-svn};
                    upstream=${svn_upstream#/};
                    while read line; do
                    {
                    }';
                ((count=$1*-1));
                ((xtermgeow*=2));
                ((xtermgeow+-0));
                ((xtermgeow/=2));
                DIRLIST="$DIRLIST $d";
                GIT_PS1_SHOWUPSTREAM="$value";
                Usage "$USAGE" "Too many arguments";
                [ -n "${!var}" ] && colors="$colors ${!var}" && shift || more_opts=0
                __git_eread "$g/rebase-apply/head-name" b;
                __git_ps1_show_upstream;
                _autoload_edit "$@";
                _autoload_help;
                _autoload_page "$@";
                _autoload_remove "$@";
                _autoload_resolve "$wfuncname";
                b="$(git symbolic-ref HEAD 2>/dev/null)";
                b="${head#ref: }";
                bg=$(dashstripper "$1");
                brandtext="eval \"\$(type $func | sed -e 1d -e 4ilocal\\ AUTOLOADED=\'$func\')\"";
                break
                break
                builtin cd $(pwdswap "$1" "$2");
                builtin cd $tgt;
                c="${DIRLIST_PWD_INDIC}$d";
                case "$commit" in 
                current='--nopwd';
                dirlist --nosavecurrent $2;
                dirlist --nosavetarget $1;
                dirlist_usage;
                dirlist_usage;
                dirname=$2;
                do
                do
                doevalshim=1
                doexport=1
                done;
                done;
                doreload=1
                doverbose=1
                dumpopt="$dumpopt -${opt}"
                echo "$original is an invalid option.";
                echo "Internal error!";
                echo "_aload: usage: _aload [-xrvlyf] [-a dir] [function ...]" 1>&2;
                echo "autoload: function '$func' already exists";
                echo "autoload: usage: autoload [-puUx] [function ...]" 1>&2;
                else
                else
                else
                else
                else
                else
                else
                else
                esac;
                evalstat=$?;
                export OLDPWD=$oldpwd;
                fi
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                for ((n=1; n <= n_stop; n++))
                for r in "${REPOS[@]}";
                func-usage git-go;
                func-usage git-go;
                funcnames=("$@");
                git diff --no-ext-diff --cached --quiet || i="+";
                git diff --no-ext-diff --quiet || w="*";
                if ! __git_eread "$g/HEAD" head; then
                if (( $? == 0 )); then
                if (($#)); then
                if ((doevalshim)); then
                if ((doshim)); then
                if ((evalstat==0)); then
                if ((opt_list)); then
                if ((optimize)); then
                if [ "$head" = "$b" ]; then
                if [ $options_num_args_left -ge 3 ]; then
                if [ -f "$g/CHERRY_PICK_HEAD" ]; then
                if [ -f "$g/rebase-apply/applying" ]; then
                if [ -n "$opt_i" ]; then
                if [ -z "$short_sha" ] && [ -z "$i" ]; then
                if [[ "svn+git" = "$upstream" ]]; then
                if [[ -z "$svn_upstream" ]]; then
                if [[ -z "${GIT_PS1_SHOWUPSTREAM}" ]]; then
                if \$theCharCount < \$AUTOLOAD_SHIM_OVERHEAD
                is-int $tgt;
                legacy=1
                loadthese=$(find $(_autoload_split_fpath) -maxdepth 1 -type f -printf '%f ')
                loadthese=$(find $OPTARG -maxdepth 1 -type f -printf '%f\n'| sort )
                local brandtext;
                local head="";
                local n_stop="${#svn_remote[@]}";
                local oldpwd=$(pwd);
                local wfuncname=$1;
                moreopts=0;
                name=1
                newvalue="${dirname}${sep}${oldvalue}";
                opt_exact='--exact'
                opt_exact='--exact-head'
                opt_exact='--exact-tail'
                opt_gse=1;
                opt_list=1
                opt_list=1
                opt_list=2
                opt_mbig='-m'
                opt_mod=1
                opt_p=1
                opt_roots='-r'
                opt_s=1
                opt_subwt_only='-o'
                opt_subwt_only='-o'
                opt_update='-u'
                opt_wt=''
                opt_wt='-w'
                optimize=1
                options_missing_arg="$options_missing_arg $OPTARG";
                options_unknown_option="$options_unknown_option $OPTARG";
                p=" u+${count#*	}-${count%	*}"
                p=" u+${count#0	}"
                p=" u-${count%	0}"
                p=" u="
                p=""
                p=""
                p="$p ${__git_ps1_upstream_name}";
                p="$p \${__git_ps1_upstream_name}";
                p="<"
                p="<>"
                p="="
                p=">"
                passthru="$passthru -$opt $OPTARG"
                passthru="$passthru -$opt"
                pathspec="$2";
                pathvar=$1;
                pathvar=$1;
                r="|MERGING";
                r="|REBASE";
                readarray -t funcnames < <(declare -F | grep -v -- '-fx' | sed 's/declare -f//');
                return
                return
                return
                return
                return
                return
                return
                return "$NOT_OK"
                return "$OK"
                return 0
                return 1
                return;
                s="$";
                shift
                shift
                shift
                shift
                shift
                shift
                shift $((OPTIND-1));
                shift $((OPTIND-1));
                shift $((OPTIND-1));
                shift $((OPTIND-1));
                shift;
                shift;
                summary=1
                svn_remote[$((${#svn_remote[@]} + 1))]="$value";
                svn_upstream=${svn_upstream%@*};
                svn_upstream=${svn_upstream[${#svn_upstream[@]} - 2]};
                svn_url_pattern="$svn_url_pattern\\|$value";
                target='--nopwd';
                u="%${ZSH_VERSION+%}";
                unset __git_ps1_upstream_name;
                upstream="$option"
                upstream=svn+git
                var="forebackmap_$bg";
                verbose=1
               'theCharCount=\$(wc -c \$theFuncFile)'
               autoload -f -x
              . ~/bin/autoload             # or wherever you've put it
              local  AUTOLOADED='func';
            "")
            "")
            "0	"*)
            "0	"*)
            "0	0")
            "0	0")
            ${XTERM} -display ${DISPLAY} -title ${host} ${XARGS} &
            ((j+=1));
            *"	0")
            *"	0")
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            --)
            --)
            --nosavecurrent)
            --nosavetarget)
            -h | --help)
            :;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            MANPATH=$(manpath);
            PS1="$ps1pc_start$ps1pc_end"
            REPO=${REPOS[0]};
            RXCmd "$HOSTNAME" "$XTERMGEO" "$XTERMFONTS" "$@" -fg "${color%%,*}" -bg "${color##*,}" "$xtermgeo";
            XARGS="$XTERMGEO";
            [ "$exported" = 'x' ] && exported=' exported' || exported=' not exported';
            [ -n "$newvalue" ] && newvalue="${newvalue}${sep}${line}" || newvalue="${line}";
            [ -n "$opt_x" ] && export MANPATH;
            [ -z "$executed" ] && executed=' executed' || executed=' not executed';
            [0-9]*)
            __git_eread "$g/rebase-apply/last" total;
            __git_eread "$g/rebase-apply/next" step;
            __git_ps1_upstream_name=$(git rev-parse 				--abbrev-ref "$upstream" 2>/dev/null);
            a)
            a)
            args="$args $1";
            assigned=1;
            autoload -r $f;
            b="GIT_DIR!";
            bash.showupstream)
            c="BARE:";
            chmod a+x $i;
            continue;
            continue;
            count="";
            count="$behind	$ahead";
            dirname=$1;
            do
            done;
            e | exact)
            e)
            echo "## WARNING:$iam - no mapped color found for $result" 1>&2;
            echo "$funcname not found in FPATH funcfile. Skipping.";
            echo "$funcname not found in FPATH funcfile. Skipping.";
            echo "${color}";
            echo "${pre}${out}${post}";
            echo "History inited.";
            echo "INFO: git hook $i is not executable. Making it so.";
            echo "Initializing bash command history setup...";
            echo "Matches only ${REPOS[0]}. Going there.";
            echo $p/$1;
            echo -n "autoload ";
            echo Reloading $f;
            eh | exact-head)
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            et | exact-tail)
            eval "opt_$argname=$OPTARG";
            eval "opt_$argname=1";
            eval $pathvar="'$dirname'";
            eval $pathvar="'$newvalue'";
            executed=$(type $func | grep 'local IS_SHIM');
            export FPATH=~/functions       # or wherever you stash them
            exported=$(declare -F | grep -E "${func}$" | sed 's/declare -f\(x\{0,1\}\).*/\1/');
            f)
            fi
            fi
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            for commit in $commits;
            funcfile=$(_autoload_resolve $func);
            git | svn)
            gitstring=$(printf -- "$printf_format" "$gitstring");
            h | help)
            h)
            idxresult=$(echo "$result" | sed 's/[:/]//g');
            if (( $? == 0 )); then
            if ((doverbose)); then
            if ((opt_mod)); then
            if [ "$1" = '--all' ]; then
            if [ "$d" == "$p" ]; then
            if [ $options_num_args_left -eq 2 ]; then
            if [ $options_num_args_left -eq 2 ]; then
            if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
            if [ -d $tgt ] || [ "$tgt" = '-' ]; then
            if [ -f "$g/MERGE_HEAD" ]; then
            if [ -f "$g/rebase-apply/rebasing" ]; then
            if [ -h "$g/HEAD" ]; then
            if [ -n "$opt_f" ]; then
            if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] && [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
            if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] && git rev-parse --verify --quiet refs/stash > /dev/null; then
            if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] && [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] && git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' > /dev/null 2> /dev/null; then
            if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
            if [ -z $(declare -F autoload) ]
            if [[ -n $funcfile ]]; then
            if [[ 0 -ne ${#svn_upstream[@]} ]]; then
            if echo "$opts" | grep --color=auto --color=auto "$OPTARG" > /dev/null 2>&1; then
            is-neg $1;
            l | list)
            l)
            legacy)
            listfull)
            local -a svn_upstream;
            local XCOOKIE=`/usr/bin/X11/xauth list ${DISPLAY}`;
            local andevaled='';
            local andexported='';
            local commit behind=0 ahead=0;
            local doshim=1;
            local evalstat=0;
            local f=$(basename $i);
            local funcfile;
            local newvalue;
            local oldvalue;
            local out=$(git config --get remote.$(git config --get branch.$(git-get-current-branch).remote 2>/dev/null).url 2>/dev/null);
            local tgt=$1;
            local xtermgeo="-geometry ${xtermgeow}x${XTERMGEOH}+$((XTERMGEOX+(j*72)))+$((XTERMGEOY+(j*72)))";
            m | mbig)
            m)
            mkdir -p ${TILDAE:-$HOME}/.bash_histories;
            mod)
            n)
            name)
            negs="$negs $neg_carr";
            nowt)
            o)
            opt_repo_no=$1;
            opt_repo_sel=$1;
            options_missing_arg="$options_missing_arg $OPTARG";
            p | s)
            p)
            pathspec="$1";
            pcmode=yes;
            printf -v gitstring -- "$printf_format" "$gitstring";
            printf_format="${1:-$printf_format}"
            printf_format="${3:-$printf_format}";
            ps1pc_end="$2";
            ps1pc_start="$1";
            r | roots)
            r)
            r="|REBASE-i";
            r="|REBASE-m";
            readarray -t funcnames < <(grep -E '^[a-zA-Z0-9_-]+\s*\(\)' "$2" | sed 's/\s*().*//');
            result=$(echo "$color" | sed 's/^.*\;//;s/[^rgb:0-9a-f/]//g');
            return $exit
            return;
            return;
            s)
            s)
            shift;
            sleep .05;
            ssh ${host} "(
            stat)
            status=1;
            status=1;
            subwt)
            svn-remote.*.url)
            svn_upstream=($(git log --first-parent -1 					--grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null));
            then
            toedit="$toedit $file";
            topage="$topage $file";
            u | update)
            u)
            upstream="@{upstream}"
            v)
            verbose)
            w)
            w)
            wt)
            wtonly)
            x | r | v | l | y | f | o)
            x)
            y)
           '-e' flag described below for modifications.
           'bar' and will NOT reload 'bar' for you.)
           (load) are already used as options in 'autoload').
           FPATH.
           It would be very easy to modify a function's script, run the
           Reloads, of course, only apply in the context of the current session
           Reloads, of course, only apply in the context of the current session
           and any future subshell you start from the current session. Existing
           and any future subshell you start from the current session. Existing
           are already used as options. Note that with this option, only one
           details.
           don't shim it, just eval directly.
           for each funcion and
           function and scratch your head for a long time trying to figure out
           function is called.
           function name is processed.
           function. 'w' stands for 'where' because 'f' (find) and 'l' (locate)
           functions' source and have the new version executed next time the
           functions.
           have been already been executed.  This will allow you to modify the
           load the true function code. See "Using '-l'" in the NOTES below for
           modified when you exit \$EDITOR. (Note: If you use 'autoload -e foo'
           run \$PAGER on them ('m' is for 'more', because 'p' (page) and 'l'
           sessions will need to have the same 'autoload -r' command run in
           sessions will need to have the same 'autoload -r' command run in
           start up \$EDITOR on those scripts. Reload the ones that were
           subshells.
           them.
           them.
           to edit function 'foo', and then in your editor you separately load
           up function 'bar', 'autoload' has no way of knowing that you edited
           why your changes are not being executed. That's why we provide the
          '-l' below.)
          'autoload_calc_shimsize' with the name of the function to determine
          'git foo' and looking for a file 'git-foo' on the path. 'git' then
          'small' in this case can be determined by calling the function
          *** do NOT put code other than the function definition in the file ***
          -l' call before you start your loop. '-l' will instruct 'autoload' to
          /bin/sh. That's not a subshell of your process. It will not get your
          As a consquence of this (and other reasons), the AUTOLOAD* namespace
          At the time of this writing, git extentions work by taking a command
          DIFFERENT shell. And the typical example of this is git extentions.
          If you are running under set -x and/or set -v, you may see that the
          If you find that you want your functions to be available in such
          Programer.
          Remember, however, that environment modifications that occur in a
          The 'if' statement is used to make sure we don't reload autoload
          The only thing left to do is to load up the autoload function itself
          This may not be an error; review your code. What is most likely
          When called in the profile of a login shell where no definitions
          adding the text
          all of these functions so that they are available in subshells; you
          all the function text in memory. Even though grepping through the
          and its helper functions. That needs to happen in your profile:
          are 'sh' compliant and take the read/parse hit every time they are
          backticks or $(), or in a script that is not being sourced into the
          brace. Then supporting -p and -s is just a matter of grepping through
          by using 'autoload', the amount of memory they take up can be greatly
          bypass the shim creation and just source in the function's file
          circumstances, convert them back to plain old scripts, make sure they
          condition for this is starting up not a subshell, but a brand new
          created by the 'autoload' call is what is executed. This function
          current environment. If you have not previously called the function
          directly. For a few calls, the overhead of repeatedly running the
          diredctly. In order to do that, we modify the function's code by
          do not have to re-source the autoload file in '.bashrc'.
          early as possible in process start up. See NOTES below for
          encounter the shim and replace with the real code before executing.
          environment may not be the most efficient way to support this, it is
          executes 'git-foo' in a new shell - it executes your command in
          exist, -f will load all functions it can find on FPATH and -x will
          export all of those functions to be available in subshells when this
          exported shell functions. Ballgame over.
          for any reason, you will rerun the initialization code. Make sure
          function and all of its support functions. Additionally, we export
          function definition in the file. Unless of course you want to do some
          happening is that you are calling the function in subshells via
          has been previously removed (-u) or you force the reload (-r).
          heavily used.
          if a function 'func' has been autoloaded or if it was loaded
          in question at your command line or in a script that was sourced into
          in the profile that gets run for login shells.
          is called in a login shell. Using this option will relieve you of the
          is in the FPATH environment variable. Subdirectories are NOT scanned.
          is reserved for autoloading. Make sure you check any functions that
          its shim size.
          larger than your actual functions, rendering the memory savings moot.
          matter how hard you try, your autoloaded functions will be
          named exactly the same as the function.
          need to call 'autoload' after Every Single Function Definition, nor
          needlessly. Sourcing in the autoload script loads the 'autoload'
          of small functions, then it is possible that the shim text will be
          one-time initialization. But beware that if you reload the function
          or expanded) silently ignores the request to load the shim unless it
          process. If your calls are in their own script, that script must be
          reduced, depending on the size of your functions. If you have a lot
          require it be re-exported; the modifications will appear in
          run.
          shim does not appear to "work"; instead of seeing the shim first and
          shim is not expensive, but in a tight loop, it might be. Caveat
          sibling shells. So, if you call an autoloaded function in a very
          sourced in. Command line invocations are also sufficient. (But see
          subsequent subshells.
          subshell are NOT propagated back to the calling shell or over to any
          suggestions.
          the current envirnoment, then the various subshells are going to
          the real code subsequently, you may see the shim evaluated multiple
          the simplest to implement for -p and -s operations that are not
          then calls the actual function with any arguments you just passed in
          then goes and finds the appropriate file in FPATH, sources it in and
          tight loop of very many subshells, you may want to make an 'autoload
          times.
          to the shim and to the actual function text, just after the opening
          to the shim function. Subsequent calls just run the function.
          to their original commit times
          unavailable to you, even if you run 'autoload -x -f'. The typical
          will you need to call it in subshells.
          with AUTOLOAD and change them.
          you bring under autoload for use of variables or functions that start
          your initialization is re-entrant. Or, better yet,
        'autoreload' is a synonym for 'autoload -r'. See below.
        ( xrandr || xwininfo || false ) > /dev/null 2>&1;
        (( ++i>${#M} )) && i=1;
        ((c==0)) && ((no0)) && return;
        ((i+=1));
        *)
        -a Autoload (a)ll the functions found in the given directory.
        -e Find the scripts in which the specified functions are defined and
        -f Autoload all the functions found in all the directories on the
        -l When autoloading a function, eval the shim immediately in order to
        -m Find the scripts in which the specified functions are defined and
        -o Optimize. When autoloading, take the time to execute
        -p Print all the autoloaded functions.
        -r Reload the shims of the specified functions, even if the functions
        -s Print all the autoloaded functions and add their export status.
        -u Unset the function, so it can be reloaded.
        -v Turns up the chattiness.
        -w Print the full path to the single script containing the specified
        -x Export the specified functions to the environment for use in
        -y Summar(y). Print the number of loaded, exported and optimized
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        . $file;
        0 | 1)
        2 | 3)
        ;;
        ;;
        ;;
        ;;
        ;;
        An implementation of the 'autoload' functionality built into other
        HISTFILE="${HISTFILE}.$1";
        HISTFILE=${TILDAE:-$HOME}/.bash_histories/hist.$(hostname).$(date +%Y_%m_%d_%H_%M_%S).$$;
        HISTFILESIZE=$HISTSIZE;
        HISTSIZE=9000;
        HISTTIMEFORMAT="%m/%d - %H:%M:%S ";
        MATCH="-E";
        PS1="$ps1pc_start$gitstring$ps1pc_end";
        S=${T:i:40};
        Usage "$@";
        Usage "$USAGE" "Missing argument for -$options_missing_arg";
        Usage "$USAGE" "No directory specified";
        Usage "$USAGE" "Unknown option -$options_unknown_option";
        Usage "${USAGE[@]}" "Cannot use both options -e and -c simultaneously";
        Usage "${USAGE[@]}" "Missing argument for -$options_missing_arg";
        Usage "${USAGE[@]}" "No directory specified";
        Usage "${USAGE[@]}" "Unknown option -$options_unknown_option";
        Usage "${USAGE[@]}";
        Usage "${USAGE[@]}";
        XFUNCS_X_IS_AVAILABLE=$?;
        \mv -f $my_index_file $index_file;
        __git_eread "$g/rebase-merge/end" total;
        __git_eread "$g/rebase-merge/head-name" b;
        __git_eread "$g/rebase-merge/msgnum" step;
        __git_ps1_branch_name=$b;
        __git_ps1_colorize_gitstring;
        _aload $passthru "$@";
        _autoload_dump $dumpopt;
        _autoload_dump;
        _bbsave-dotfile-entry "$@";
        _dirlist_select "$@";
        _dirlist_select $DIRLIST;
        _git-cd-return "$@";
        _git-cd-to "$@";
        _git-cd-unwind "$@";
        _rsync2nfs_usage "$@";
        _save-dotfile-entry "$@";
        acopy "$@";
        acount "$@";
        aeach "$@";
        aindicies "$@";
        aptperl "$@";
        apush "$@";
        aset "$@";
        ashift "$@";
        asplice "$@";
        asplit "$@";
        asplit-to-array "$@";
        asplit-to-stdout "$@";
        autoload
        autoload -a directory [-oyv]
        autoload -f [-oyv]
        autoload [-h]
        autoload [-ps]
        autoload [-xuremloyv] [function ...]
        autoload-edit-group "$@";
        autoreload [function ...]
        avalues "$@";
        b="\${__git_ps1_branch_name}";
        bash_current_version_compare "$@";
        bbadddotfile "$@";
        bbdotfilesfuncs-help "$@";
        bbgithub-clone "$@";
        bbgithub-merge-pull-request "$@";
        bbgithub-set-locals "$@";
        bbgithub-set-triangle "$@";
        bbgithub-whack "$@";
        bbmakesshconfig "$@";
        bbmakesymlinks "$@";
        bbshowdotfiles "$@";
        branch_color="$bad_color";
        branch_color="$ok_color";
        case "$1" in 
        case "$count" in 
        case "$count" in 
        case "$key" in 
        case "$option" in 
        case $opt in 
        case $opt in 
        case $opt in 
        case $option in 
        case $option in 
        cat "/tmp/ticker.$(hostname).$$";
        cat >> $HISTFILE  <<EOF
        cat_history "$@";
        check-nfsmachines "$@";
        cmd-echo "$@";
        color=$(eval echo "\$$var");
        count="$(git rev-list --count --left-right 				"$upstream"...HEAD 2>/dev/null)";
        cp "$HISTFILE" "${HISTFILE}.$1";
        dashstripper "$@";
        declare option;
        declare original="$1";
        delit="$pathspec";
        delit="^$pathspec\$";
        devgit-clone "$@";
        devgit-delete-repo "$@";
        dirlist "${TILDAE:-$HOME}/$(git-strip-repo "$REPO")";
        dirlist $1;
        do
        done;
        dowhich "$@";
        dpkg-list-distros "$@";
        dpkg-psql "$@";
        dpkg-psql-dump-prod "$@";
        dpkg-psql-load-local "$@";
        dpkg-psql-query-change "$@";
        dpkg-psql-query-change-log "$@";
        dpkg-psql-query-change-log-usage "$@";
        dpkg-test-build "$@";
        dpkg-test-build-usage "$@";
        dpkg-test-rebuild "$@";
        dpkg-test-rebuild-usage "$@";
        dpkgrefrepos "$@";
        echo "## WARNING:$iam - NEWXCOLOR not defined" 1>&2;
        echo "## WARNING:$iam - XTERM_SHELL not defined, probably not an xterm" 1>&2;
        echo "$NEWXCOLOR";
        echo "$tgt" does not match any repo;
        echo "${comment}$line";
        echo "${func}${exported}${executed}";
        echo "${pre}${c}${post}";
        echo "Cannot find hook directory";
        echo "Error: hostname not specified.";
        echo "Found $f";
        echo "autoload: FPATH not set or null" 1>&2;
        echo $dotgit/hooks;
        echo -en "\\033]${col};?\\033\\" > /dev/tty;
        echo -n " [$ii] ${BASH_SOURCE[$ii]}";
        echo Looks like there is already a ticker running;
        echo usage: rename_history suffix;
        echo with the banner:;
        echo;
        echo;
        editor_opt "$@";
        edpath "$@";
        element=$(echo $oldvalue | sep2line "${sep}" | grep -x "$dirname");
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        eval "$(type Usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'Usage\')";
        eval "$(type _bbsave-dotfile-entry | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_bbsave-dotfile-entry\')";
        eval "$(type _dirlist_select | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_dirlist_select\')";
        eval "$(type _git-cd-return | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_git-cd-return\')";
        eval "$(type _git-cd-to | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_git-cd-to\')";
        eval "$(type _git-cd-unwind | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_git-cd-unwind\')";
        eval "$(type _rsync2nfs_usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_rsync2nfs_usage\')";
        eval "$(type _save-dotfile-entry | sed -e 1d -e 4ilocal\ AUTOLOADED=\'_save-dotfile-entry\')";
        eval "$(type acopy | sed -e 1d -e 4ilocal\ AUTOLOADED=\'acopy\')";
        eval "$(type acount | sed -e 1d -e 4ilocal\ AUTOLOADED=\'acount\')";
        eval "$(type aeach | sed -e 1d -e 4ilocal\ AUTOLOADED=\'aeach\')";
        eval "$(type aindicies | sed -e 1d -e 4ilocal\ AUTOLOADED=\'aindicies\')";
        eval "$(type aptperl | sed -e 1d -e 4ilocal\ AUTOLOADED=\'aptperl\')";
        eval "$(type apush | sed -e 1d -e 4ilocal\ AUTOLOADED=\'apush\')";
        eval "$(type aset | sed -e 1d -e 4ilocal\ AUTOLOADED=\'aset\')";
        eval "$(type ashift | sed -e 1d -e 4ilocal\ AUTOLOADED=\'ashift\')";
        eval "$(type asplice | sed -e 1d -e 4ilocal\ AUTOLOADED=\'asplice\')";
        eval "$(type asplit | sed -e 1d -e 4ilocal\ AUTOLOADED=\'asplit\')";
        eval "$(type asplit-to-array | sed -e 1d -e 4ilocal\ AUTOLOADED=\'asplit-to-array\')";
        eval "$(type asplit-to-stdout | sed -e 1d -e 4ilocal\ AUTOLOADED=\'asplit-to-stdout\')";
        eval "$(type autoload-edit-group | sed -e 1d -e 4ilocal\ AUTOLOADED=\'autoload-edit-group\')";
        eval "$(type avalues | sed -e 1d -e 4ilocal\ AUTOLOADED=\'avalues\')";
        eval "$(type bash_current_version_compare | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bash_current_version_compare\')";
        eval "$(type bbadddotfile | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbadddotfile\')";
        eval "$(type bbdotfilesfuncs-help | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbdotfilesfuncs-help\')";
        eval "$(type bbgithub-clone | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbgithub-clone\')";
        eval "$(type bbgithub-merge-pull-request | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbgithub-merge-pull-request\')";
        eval "$(type bbgithub-set-locals | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbgithub-set-locals\')";
        eval "$(type bbgithub-set-triangle | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbgithub-set-triangle\')";
        eval "$(type bbgithub-whack | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbgithub-whack\')";
        eval "$(type bbmakesshconfig | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbmakesshconfig\')";
        eval "$(type bbmakesymlinks | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbmakesymlinks\')";
        eval "$(type bbshowdotfiles | sed -e 1d -e 4ilocal\ AUTOLOADED=\'bbshowdotfiles\')";
        eval "$(type cat_history | sed -e 1d -e 4ilocal\ AUTOLOADED=\'cat_history\')";
        eval "$(type check-nfsmachines | sed -e 1d -e 4ilocal\ AUTOLOADED=\'check-nfsmachines\')";
        eval "$(type cmd-echo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'cmd-echo\')";
        eval "$(type dashstripper | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dashstripper\')";
        eval "$(type devgit-clone | sed -e 1d -e 4ilocal\ AUTOLOADED=\'devgit-clone\')";
        eval "$(type devgit-delete-repo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'devgit-delete-repo\')";
        eval "$(type dowhich | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dowhich\')";
        eval "$(type dpkg-list-distros | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-list-distros\')";
        eval "$(type dpkg-psql | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql\')";
        eval "$(type dpkg-psql-dump-prod | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql-dump-prod\')";
        eval "$(type dpkg-psql-load-local | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql-load-local\')";
        eval "$(type dpkg-psql-query-change | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql-query-change\')";
        eval "$(type dpkg-psql-query-change-log | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql-query-change-log\')";
        eval "$(type dpkg-psql-query-change-log-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-psql-query-change-log-usage\')";
        eval "$(type dpkg-test-build | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-test-build\')";
        eval "$(type dpkg-test-build-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-test-build-usage\')";
        eval "$(type dpkg-test-rebuild | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-test-rebuild\')";
        eval "$(type dpkg-test-rebuild-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkg-test-rebuild-usage\')";
        eval "$(type dpkgrefrepos | sed -e 1d -e 4ilocal\ AUTOLOADED=\'dpkgrefrepos\')";
        eval "$(type editor_opt | sed -e 1d -e 4ilocal\ AUTOLOADED=\'editor_opt\')";
        eval "$(type edpath | sed -e 1d -e 4ilocal\ AUTOLOADED=\'edpath\')";
        eval "$(type func-name-spoof | sed -e 1d -e 4ilocal\ AUTOLOADED=\'func-name-spoof\')";
        eval "$(type func-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'func-usage\')";
        eval "$(type get-next-descriptor | sed -e 1d -e 4ilocal\ AUTOLOADED=\'get-next-descriptor\')";
        eval "$(type git-branch-info | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-branch-info\')";
        eval "$(type git-branch-info-pull-request | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-branch-info-pull-request\')";
        eval "$(type git-check-with-master | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-check-with-master\')";
        eval "$(type git-checkout | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-checkout\')";
        eval "$(type git-clone | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-clone\')";
        eval "$(type git-clone-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-clone-usage\')";
        eval "$(type git-delete-branch | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-delete-branch\')";
        eval "$(type git-delete-repo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-delete-repo\')";
        eval "$(type git-delete-repo-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-delete-repo-usage\')";
        eval "$(type git-delete-worktree | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-delete-worktree\')";
        eval "$(type git-diff-faq | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-diff-faq\')";
        eval "$(type git-diff-to-checkpoint | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-diff-to-checkpoint\')";
        eval "$(type git-diff-two-repos-on-disk-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-diff-two-repos-on-disk-usage\')";
        eval "$(type git-dry-run-hook | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-dry-run-hook\')";
        eval "$(type git-find | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-find\')";
        eval "$(type git-find-conflicts | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-find-conflicts\')";
        eval "$(type git-find-git-dir | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-find-git-dir\')";
        eval "$(type git-find-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-find-usage\')";
        eval "$(type git-go-set | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-go-set\')";
        eval "$(type git-grep | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-grep\')";
        eval "$(type git-hold | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-hold\')";
        eval "$(type git-hold-diff | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-hold-diff\')";
        eval "$(type git-hold-remove | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-hold-remove\')";
        eval "$(type git-hold-restore | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-hold-restore\')";
        eval "$(type git-in-a-worktree | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-in-a-worktree\')";
        eval "$(type git-is-edited | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-is-edited\')";
        eval "$(type git-log-shas-range | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-log-shas-range\')";
        eval "$(type git-merge-find | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-merge-find\')";
        eval "$(type git-merge-pull-request | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-merge-pull-request\')";
        eval "$(type git-merge-pull-request-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-merge-pull-request-usage\')";
        eval "$(type git-merge-write | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-merge-write\')";
        eval "$(type git-parse-remote-v | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-parse-remote-v\')";
        eval "$(type git-post-new | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-post-new\')";
        eval "$(type git-pull | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-pull\')";
        eval "$(type git-regressive-diffs | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-regressive-diffs\')";
        eval "$(type git-rename-branch | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-rename-branch\')";
        eval "$(type git-rename-worktree | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-rename-worktree\')";
        eval "$(type git-rename-worktree-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-rename-worktree-usage\')";
        eval "$(type git-restore | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-restore\')";
        eval "$(type git-set-triangle | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-set-triangle\')";
        eval "$(type git-set-triangle-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-set-triangle-usage\')";
        eval "$(type git-st-ext | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-st-ext\')";
        eval "$(type git-st-ext-all | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-st-ext-all\')";
        eval "$(type git-st-por | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-st-por\')";
        eval "$(type git-st-por-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-st-por-usage\')";
        eval "$(type git-sync-with-master | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-sync-with-master\')";
        eval "$(type git-to-stdout | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-to-stdout\')";
        eval "$(type git-to-stdout-last-existed | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-to-stdout-last-existed\')";
        eval "$(type git-to-stdout-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-to-stdout-usage\')";
        eval "$(type git-update-this-hook | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-update-this-hook\')";
        eval "$(type git-worktree-create | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-worktree-create\')";
        eval "$(type git-worktree-diff-to-root | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-worktree-diff-to-root\')";
        eval "$(type git-worktree-root | sed -e 1d -e 4ilocal\ AUTOLOADED=\'git-worktree-root\')";
        eval "$(type github-clone | sed -e 1d -e 4ilocal\ AUTOLOADED=\'github-clone\')";
        eval "$(type heach | sed -e 1d -e 4ilocal\ AUTOLOADED=\'heach\')";
        eval "$(type hist-index-unlock | sed -e 1d -e 4ilocal\ AUTOLOADED=\'hist-index-unlock\')";
        eval "$(type hist_with_pwd | sed -e 1d -e 4ilocal\ AUTOLOADED=\'hist_with_pwd\')";
        eval "$(type hkeys | sed -e 1d -e 4ilocal\ AUTOLOADED=\'hkeys\')";
        eval "$(type hvalues | sed -e 1d -e 4ilocal\ AUTOLOADED=\'hvalues\')";
        eval "$(type list | sed -e 1d -e 4ilocal\ AUTOLOADED=\'list\')";
        eval "$(type listpath | sed -e 1d -e 4ilocal\ AUTOLOADED=\'listpath\')";
        eval "$(type load_history | sed -e 1d -e 4ilocal\ AUTOLOADED=\'load_history\')";
        eval "$(type makepstree | sed -e 1d -e 4ilocal\ AUTOLOADED=\'makepstree\')";
        eval "$(type makesymlinks | sed -e 1d -e 4ilocal\ AUTOLOADED=\'makesymlinks\')";
        eval "$(type mount-MBIG | sed -e 1d -e 4ilocal\ AUTOLOADED=\'mount-MBIG\')";
        eval "$(type mount-nfs | sed -e 1d -e 4ilocal\ AUTOLOADED=\'mount-nfs\')";
        eval "$(type new_history | sed -e 1d -e 4ilocal\ AUTOLOADED=\'new_history\')";
        eval "$(type perl-filter-code | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-filter-code\')";
        eval "$(type perl-list-root | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-list-root\')";
        eval "$(type perl-module-new-repo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-module-new-repo\')";
        eval "$(type perl-module-new-repo-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-module-new-repo-usage\')";
        eval "$(type perl-module-new-zip | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-module-new-zip\')";
        eval "$(type perl-script-new-repo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perl-script-new-repo\')";
        eval "$(type perlx | sed -e 1d -e 4ilocal\ AUTOLOADED=\'perlx\')";
        eval "$(type pick | sed -e 1d -e 4ilocal\ AUTOLOADED=\'pick\')";
        eval "$(type prunedirlist | sed -e 1d -e 4ilocal\ AUTOLOADED=\'prunedirlist\')";
        eval "$(type python_dbg | sed -e 1d -e 4ilocal\ AUTOLOADED=\'python_dbg\')";
        eval "$(type readdirlist | sed -e 1d -e 4ilocal\ AUTOLOADED=\'readdirlist\')";
        eval "$(type repl | sed -e 1d -e 4ilocal\ AUTOLOADED=\'repl\')";
        eval "$(type rsync2nfs | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsync2nfs\')";
        eval "$(type rsyncvm-diff | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvm-diff\')";
        eval "$(type rsyncvm-pause | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvm-pause\')";
        eval "$(type rsyncvm-resume | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvm-resume\')";
        eval "$(type rsyncvm-running | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvm-running\')";
        eval "$(type rsyncvm-snapshot-diff | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvm-snapshot-diff\')";
        eval "$(type rsyncvmgits | sed -e 1d -e 4ilocal\ AUTOLOADED=\'rsyncvmgits\')";
        eval "$(type script-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'script-usage\')";
        eval "$(type searchpath | sed -e 1d -e 4ilocal\ AUTOLOADED=\'searchpath\')";
        eval "$(type set-nfsmachine | sed -e 1d -e 4ilocal\ AUTOLOADED=\'set-nfsmachine\')";
        eval "$(type showdotfiles | sed -e 1d -e 4ilocal\ AUTOLOADED=\'showdotfiles\')";
        eval "$(type smartwc | sed -e 1d -e 4ilocal\ AUTOLOADED=\'smartwc\')";
        eval "$(type snapshot-diff | sed -e 1d -e 4ilocal\ AUTOLOADED=\'snapshot-diff\')";
        eval "$(type snapshot-go | sed -e 1d -e 4ilocal\ AUTOLOADED=\'snapshot-go\')";
        eval "$(type snapshot-restore | sed -e 1d -e 4ilocal\ AUTOLOADED=\'snapshot-restore\')";
        eval "$(type svn-checkout | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-checkout\')";
        eval "$(type svn-get-root | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-get-root\')";
        eval "$(type svn-go | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-go\')";
        eval "$(type svn-go-get | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-go-get\')";
        eval "$(type svn-go-set | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-go-set\')";
        eval "$(type svn-go-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-go-usage\')";
        eval "$(type svn-help | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-help\')";
        eval "$(type svn-st-por | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-st-por\')";
        eval "$(type svn-st-por-usage | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-st-por-usage\')";
        eval "$(type svn-stash | sed -e 1d -e 4ilocal\ AUTOLOADED=\'svn-stash\')";
        eval "$(type tail_number_add | sed -e 1d -e 4ilocal\ AUTOLOADED=\'tail_number_add\')";
        eval "$(type tail_number_strip | sed -e 1d -e 4ilocal\ AUTOLOADED=\'tail_number_strip\')";
        eval "$(type tarcopy | sed -e 1d -e 4ilocal\ AUTOLOADED=\'tarcopy\')";
        eval "$(type tkpod | sed -e 1d -e 4ilocal\ AUTOLOADED=\'tkpod\')";
        eval "$(type toolkit-expires-in | sed -e 1d -e 4ilocal\ AUTOLOADED=\'toolkit-expires-in\')";
        eval "$(type toolkit-file-check | sed -e 1d -e 4ilocal\ AUTOLOADED=\'toolkit-file-check\')";
        eval "$(type toolkit-file-maint | sed -e 1d -e 4ilocal\ AUTOLOADED=\'toolkit-file-maint\')";
        eval "$(type uniqpath | sed -e 1d -e 4ilocal\ AUTOLOADED=\'uniqpath\')";
        eval "$(type up | sed -e 1d -e 4ilocal\ AUTOLOADED=\'up\')";
        eval "$(type uuid | sed -e 1d -e 4ilocal\ AUTOLOADED=\'uuid\')";
        eval "$(type vmadd | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmadd\')";
        eval "$(type vmchoose | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmchoose\')";
        eval "$(type vmdel | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmdel\')";
        eval "$(type vmgo | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmgo\')";
        eval "$(type vmrebuild | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmrebuild\')";
        eval "$(type vmshow | sed -e 1d -e 4ilocal\ AUTOLOADED=\'vmshow\')";
        eval "$(type writedirlist | sed -e 1d -e 4ilocal\ AUTOLOADED=\'writedirlist\')";
        eval "$(type yesno | sed -e 1d -e 4ilocal\ AUTOLOADED=\'yesno\')";
        eval set -- "$negs $@";
        eval tmp=\$$pathvar;
        exec 201> $index_lock;
        exec < /dev/tty;
        exists_fn=$(declare -F $func);
        export -f "${funcnames[@]}";
        export HISTFILE;
        export XFUNCS_X_IS_AVAILABLE;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        first_two="${DIRLIST_PWD_INDIC}${TILDAE:-$HOME}";
        first_two="${TILDAE:-$HOME} $c";
        flock -u 201;
        flock -x -w5 201 || ( echo "Cannot lock $index_lock. Aborting" && return 1 );
        for color in $colors;
        func-name-spoof "$@";
        func-usage "$@";
        function and run it. Subsequent calls to the function just run the
        function.
        get-next-descriptor "$@";
        git)
        git-branch-info "$@";
        git-branch-info-pull-request "$@";
        git-check-hook;
        git-check-with-master "$@";
        git-checkout "$@";
        git-clone "$@";
        git-clone-usage "$@";
        git-delete-branch "$@";
        git-delete-repo "$@";
        git-delete-repo-usage "$@";
        git-delete-worktree "$@";
        git-diff-faq "$@";
        git-diff-to-checkpoint "$@";
        git-diff-two-repos-on-disk-usage "$@";
        git-dry-run-hook "$@";
        git-find "$@";
        git-find-conflicts "$@";
        git-find-git-dir "$@";
        git-find-usage "$@";
        git-go-set "$@";
        git-grep "$@";
        git-hold "$@";
        git-hold-diff "$@";
        git-hold-remove "$@";
        git-hold-restore "$@";
        git-in-a-worktree "$@";
        git-is-edited "$@";
        git-log-shas-range "$@";
        git-merge-find "$@";
        git-merge-pull-request "$@";
        git-merge-pull-request-usage "$@";
        git-merge-write "$@";
        git-parse-remote-v "$@";
        git-post-new "$@";
        git-pull "$@";
        git-regressive-diffs "$@";
        git-rename-branch "$@";
        git-rename-worktree "$@";
        git-rename-worktree-usage "$@";
        git-restore "$@";
        git-set-triangle "$@";
        git-set-triangle-usage "$@";
        git-st-ext "$@";
        git-st-ext-all "$@";
        git-st-por "$@";
        git-st-por-usage "$@";
        git-sync-with-master "$@";
        git-to-stdout "$@";
        git-to-stdout-last-existed "$@";
        git-to-stdout-usage "$@";
        git-update-this-hook "$@";
        git-worktree-create "$@";
        git-worktree-diff-to-root "$@";
        git-worktree-root "$@";
        github-clone "$@";
        heach "$@";
        hist-index-unlock "$@";
        hist_with_pwd "$@";
        histinited=1;
        hkeys "$@";
        hvalues "$@";
        i="$ok_color$i";
        if (( $? == 0 )); then
        if (($#==2)); then
        if ((${#REPOS[@]}==1)); then
        if IFS=';' read -r -d \\ color; then
        if [ ! -d ${TILDAE:-$HOME}/.bash_histories ]; then
        if [ ! -x $i ]; then
        if [ "$1" = '--file' ]; then
        if [ "$1" = '--force' ]; then
        if [ "$OPTARG" != "" ]; then
        if [ "$argname" = ":" ]; then
        if [ "$argname" = "?" ]; then
        if [ "$element" = "" ]; then
        if [ "$pathvar" = 'MANPATH' ]; then
        if [ "$push_def" = 'simple' ]; then
        if [ "$tmp" = "" ]; then
        if [ "${__git_printf_supports_v-}" != yes ]; then
        if [ "${host}" = "${HOSTNAME}" ]; then
        if [ "true" = "$bare_repo" ]; then
        if [ "true" = "$inside_worktree" ]; then
        if [ $i -nt $timemarker ]; then
        if [ $options_num_args_left -eq 1 ]; then
        if [ $options_num_args_left -eq 1 ]; then
        if [ -d "$d" ]; then
        if [ -d "$g/rebase-apply" ]; then
        if [ -f "$g/rebase-merge/interactive" ]; then
        if [ -f $p/$1 ]; then
        if [ -n "$b" ]; then
        if [ -n "$exists_fn" ] && ((doreload==0)) && ((doevalshim==0)); then
        if [ -n "$opt_p" ]; then
        if [ -n "$opt_s" ]; then
        if [ -n "${color}" ]; then
        if [ -z "$opt_r" ] || [ -d "$line" ]; then
        if [ -z "${XARGS}" ]; then
        if [[ -n "$count" && -n "$name" ]]; then
        if [[ -n $file ]]; then
        if [[ -n $file ]]; then
        if commits="$(git rev-list --left-right "$upstream"...HEAD 2>/dev/null)"; then
        if is-int "$1"; then
        ii=$((i-1));
        is-neg $neg_carr;
        list "$@";
        listpath "$@";
        load_history "$@";
        local -a funcnames;
        local XARGS="${*}";
        local c=$(git stash list 2>/dev/null | wc -l);
        local c_clear='%f';
        local c_clear='\[\e[0m\]';
        local c_green='%F{green}';
        local c_green='\[\e[32m\]';
        local c_lblue='%F{blue}';
        local c_lblue='\[\e[1;34m\]';
        local c_red='%F{red}';
        local c_red='\[\e[31m\]';
        local color;
        local commits;
        local element;
        local end=$(tail -2 $i | head -1);
        local exists_fn;
        local file=$(_autoload_resolve $func);
        local file=$(_autoload_resolve $func);
        local index_file=$(dirname $HISTFILE)/.index;
        local index_lock=${index_file}.lock;
        local my_index_file=${index_file}.$(date +%s.%N).$$;
        local oldvalue=$(eval echo \$$pathvar);
        local option;
        local push_def=$(git config --global push.default 2>/dev/null);
        local start=$(head -1 $i);
        local var=xterm_Xground_map_${idxresult};
        makepstree "$@";
        makesymlinks "$@";
        memory that will, on first call, load the full text of the given
        mount-MBIG "$@";
        mount-nfs "$@";
        neg_carr=$(echo $1| sed 's/\^/-/');
        new_history "$@";
        o Although the number of functions in the environment does not change
        o Calling 'autoload' on a function that already exists (either shimmed
        o Changing and reloading a function that has been exported does not
        o Each function to be autoloaded should be defined in a single file,
        o Even with all of these shenanigans, you will find cases where no
        o In order to avoid side effects, do NOT put code other than the
        o In order to support the -p and -s options, we need a way to determine
        o The autoload script should be sourced into the current process as
        o The calls to the autoload function must be made in the current
        o The easiest way to load shims for all functions on the FPATH is to run
        o The first time the function is called, the shim function that was
        o These function definition files should be placed in a directory that
        o Using '-1'
        oldstty=$(stty -g);
        option=$(dashstripper "$1");
        option=$(dashstripper "$original");
        p=${p:-.};
        p='';
        perl -MData::Dumper -e 'do $ARGV[0] if (-r $ARGV[0]);
        perl-filter-code "$@";
        perl-list-root "$@";
        perl-module-new-repo "$@";
        perl-module-new-repo-usage "$@";
        perl-module-new-zip "$@";
        perl-script-new-repo "$@";
        perlx "$@";
        pick "$@";
        printf "%s %s\n" "$i" "${array_alias[$i]}";
        printf -- "$printf_format" "$gitstring";
        prunedirlist "$@";
        python_dbg "$@";
        r="$r $step/$total";
        readdirlist "$@";
        repl "$@";
        repo_info="${repo_info%
        result=;
        return "$FALSE";
        return "$NOK";
        return "$NOT_OK";
        return "$OK";
        return $(false);
        return $(true);
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $?;
        return $NOT_OK;
        return $NOT_OK;
        return $OK;
        return $exit;
        return $exit;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        rsync2nfs "$@";
        rsyncvm-diff "$@";
        rsyncvm-pause "$@";
        rsyncvm-resume "$@";
        rsyncvm-running "$@";
        rsyncvm-snapshot-diff "$@";
        rsyncvmgits "$@";
        s="$flags_color$s";
        script-usage "$@";
        searchpath "$@";
        set-nfsmachine "$@";
        settitle "$S";
        shells, of which 'ksh' is the most prominent.  It allows for a keeping
        shift 1;
        shift;
        shift;
        shift;
        short_sha="${repo_info##*
        showdotfiles "$@";
        smartwc "$@";
        snapshot-diff "$@";
        snapshot-go "$@";
        snapshot-restore "$@";
        stty "$oldstty";
        stty raw -echo min 0;
        svn*)
        svn-checkout "$@";
        svn-get-root "$@";
        svn-go "$@";
        svn-go-get "$@";
        svn-go-set "$@";
        svn-go-usage "$@";
        svn-help "$@";
        svn-st-por "$@";
        svn-st-por-usage "$@";
        svn-stash "$@";
        tail_number_add "$@";
        tail_number_strip "$@";
        tarcopy "$@";
        tgt="$(dirname "$tgt")/$(basename "$tgt")";
        the process environment small by loading small 'shim' functions into
        tickercfg "$@" &
        tkpod "$@";
        toolkit-expires-in "$@";
        toolkit-file-check "$@";
        toolkit-file-maint "$@";
        u="$bad_color$u";
        uniqpath "$@";
        up "$@";
        uuid "$@";
        vmadd "$@";
        vmchoose "$@";
        vmdel "$@";
        vmgo "$@";
        vmrebuild "$@";
        vmshow "$@";
        w="$bad_color$w";
        writedirlist "$@";
        yesno "$@";
       -t resets the timestamps on the pulled files
       Does a git pull, followed by a descriptive git status.
    $EDITOR $toedit;
    $PAGER $topage
    ( IFS=':';
    ( if [ -n "$1" ]; then
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((i+=1));
    ((num=OPTIND-1));
    ((options_num_args_left=$#-num));
    ((status != 0)) && echo "Exiting." && return $status;
    ((summary)) && echo "autoload: loaded:$loaded exported:$exported optimized:$optimized overhead:$AUTOLOAD_SHIM_OVERHEAD bytes"
    /bin/rm -f $TEMP;
    DIRLIST=$(echo "$first_two" "$DIRLIST" | sed "s|$HOME|\\~|g" )
    DIRLIST=$(echo "${DIRLIST}" | sed "s|$HOME|\\~|g" | sort);
    DIRLIST='';
    DIRLISTTMP=$(echo $p "$DIRLIST" | sed "s|\\~|$HOME|g" | tr ' ' '\n' | sort -u | grep -v "^${TILDAE:-$HOME}$");
    HISTFILESIZE=$HISTSIZE;
    IFS="$(printf '\n')";
    MOP_svn_go_file=${TILDAE:-$HOME}/svns/.svn-go.$(date +%Y%m%d)
    OPTERR=0;
    OPTIND=1;
    TEMP=/tmp/delpath.$$;
    USAGE[i]="   added 'dirname'.";
    USAGE[i]="   at 1. Elements are moved down to make room for the";
    USAGE[i]="$USAGE_OPT_E";
    USAGE[i]="$USAGE_OPT_H";
    USAGE[i]="$USAGE_OPT_H";
    USAGE[i]="$USAGE_OPT_P1";
    USAGE[i]="$USAGE_OPT_P1";
    USAGE[i]="$USAGE_OPT_P2";
    USAGE[i]="$USAGE_OPT_P2";
    USAGE[i]="$USAGE_OPT_P3";
    USAGE[i]="$USAGE_OPT_P3";
    USAGE[i]="$USAGE_OPT_P4";
    USAGE[i]="$USAGE_OPT_P4F";
    USAGE[i]="$USAGE_OPT_P5";
    USAGE[i]="$USAGE_OPT_P5";
    USAGE[i]="$USAGE_OPT_S";
    USAGE[i]="$USAGE_OPT_S";
    USAGE[i]="$USAGE_OPT_V";
    USAGE[i]="$USAGE_OPT_V";
    USAGE[i]="$USAGE_OPT_X";
    USAGE[i]="$USAGE_OPT_X";
    USAGE[i]="-b - Add to back of 'pathvar' (default behavior).";
    USAGE[i]="-c - 'pathspec' must be a complete match for a path element.";
    USAGE[i]="-f - Add to front of 'pathvar'.";
    USAGE[i]="-i n - Add to 'pathvar' in position 'n'. Indexing starts";
    USAGE[i]="-r - P(r)une currently non-existent path elements from 'pathvar'.";
    USAGE[i]="Deletes all path elements from 'pathvar' that match 'pathspec'. ";
    USAGE[i]="Idempotently adds 'dirname' to 'pathvar'.";
    USAGE[i]="The match is partial by default.";
    USAGE[i]="addpath [-h] [-s separator] [-f|-b|-i n] [-x] [-v] [[-p] pathvar] dirname";
    USAGE[i]="delpath [-h] [-s separator] [-e|-c] [-r] [-x] [-v] [[-p] pathvar] pathspec";
    USAGE_OPT_E="-e - 'pathspec' is interpreted as an egrep regexp.";
    USAGE_OPT_H="-h - Gives usage message.";
    USAGE_OPT_N="-n - Add index numbers to the results."
    USAGE_OPT_P1="-p pathvar - The envvar to process. Default is";
    USAGE_OPT_P2="             PATH, if -p is not specified.";
    USAGE_OPT_P3="             The '-p' is optional, in which case";
    USAGE_OPT_P4F="             the first ARGUMENT is assumed to be";
    USAGE_OPT_P4O="             the ARGUMENT is assumed to be";
    USAGE_OPT_P5="             the pathvar.";
    USAGE_OPT_S="-s sep - Path element separator. Defaults to ':'.";
    USAGE_OPT_V="-v - Executes function 'listpath' after assignment.";
    USAGE_OPT_X="-x - Exports 'pathvar'.";
    [ "$1" = '-no0' ] && no0=1 && shift;
    [ $# -gt 1 ] || return $OPTIONS_WRONG_ARGS;
    [ -n "$DIRLIST" ] && DIRLIST=$(echo "${DIRLIST}" | sed "s|$DIRLIST_PWD_INDIC||g")
    [ -n "$ghf" ] && ls --color=auto --color=auto -la $(ghf) | sed "s|/.*.githold/||"
    [ -n "$opt_e" ] && MATCH="-E";
    [ -n "$opt_p" ] && pathvar=$opt_p;
    [ -n "$opt_p" ] && pathvar=$opt_p;
    [ -n "$opt_s" ] && sep=$opt_s;
    [ -n "$opt_s" ] && sep=$opt_s;
    [ -n "$opt_v" ] && listpath -s "${sep}" -p $pathvar;
    [ -n "$opt_v" ] && listpath -s "${sep}" -p $pathvar;
    [ -n "$opt_x" ] && export $pathvar
    [ -n "$opt_x" ] && export $pathvar
    [ -r $cl ] && cat $cl && return $OK;
    [ -z "$1" ] && $usage_func ${FUNCNAME} github && return $NOT_OK;
    [ -z "$1" ] && $usage_func ${FUNCNAME} github && return $NOT_OK;
    [ -z "$1" ] && $usage_func ${FUNCNAME} github && return $NOT_OK;
    [ -z "$1" ] && echo "Missing arg: 11 for foreground, 10 for background" && return 1;
    [ -z "$1" ] && echo "usage: safe_func_export [funcname || --all]" && return 1;
    [ -z "$EDITOR" ] && echo "Error: no EDITOR defined" && return 1;
    [ -z "$PAGER" ] && echo "Error: no PAGER defined" && return 1;
    [ -z "$files" ] && files=$HISTFILE;
    [ -z "$loadthese" ] && loadthese="$@";
    [ -z "$pathvar" ] && pathvar=PATH;
    [ -z "$pathvar" ] && pathvar=PATH;
    [ -z "$roottoadd" ] && roottoadd=${TILDAE:-$HOME}/perl;
    [ -z "$roottodel" ] && roottodel=${TILDAE:-$HOME}/perl;
    [ -z "$tgt" ] && tgt=$SSHFS_LOCALMBIG;
    [ -z "$toedit" ] && return 1;
    [ -z "$topage" ] && return 1;
    [ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no;
    [ -z "${ZSH_VERSION-}" ] || [[ -o PROMPT_SUBST ]] || ps1_expanded=no;
    [ -z "${colors}" ] && var="forebackmap_$(xterm_background)" && colors=${!var};
    \rm -f $index_file ${index_file}.*;
    \rm -f $timemarker
    adddotfile "$@"
    addpath -x -f -p MANPATH "$roottoadd/man"
    addpath -x -f -p PATH "$roottoadd/bin";
    addpath -x -f -p PERL5LIB "$roottoadd/lib/perl5";
    addpath -x -f -p PERL5LIB "$roottoadd/lib/perl5/site_perl";
    addpath -x -f -p PERL5LIB "$roottoadd/lib/perl5/site_perl/$pcv";
    addpath -x -f -p PERL5LIB "$roottoadd/lib64/perl5";
    addpath -x -f -p PERL5LIB "$roottoadd/lib64/perl5/site_perl";
    addpath -x -f -p PERL5LIB "$roottoadd/lib64/perl5/site_perl/$pcv";
    addpath -x -f -p PERL5LIB "$roottoadd/share/perl5";
    addpath -x -f -p PERL5LIB "$roottoadd/share/perl5/site_perl";
    addpath -x -f -p PERL5LIB "$roottoadd/share/perl5/site_perl/$pcv";
    addpath -x -f /bb/bin
    apop wcstriplist > /dev/null;
    aptperl "$@"
    arc diff
    arc diff --update $1
    array_alias=();
    asplice $array_name 0 0 "$@";
    asplice --removed $array_name -1;
    asplit wcstriplist ' ' "$(wc "$@" )";
    asplit-to-array "$@"
    asplit-to-stdout "$@"
    autoload -r "$@"
    avalues wcstriplist
    awk "BEGIN{RS=\"$sep\"}{print}"
    b=${b##refs/heads/};
    bash_history_index
    bash_history_index $(dirname $HISTFILE)/hist.*
    bash_history_sync;
    bbadddotfile "$@"
    bbgithub-clone "$@"
    bbgithub-whack "$@"
    bbmakesymlinks "$@"
    bbmakesymlinks "$@"
    builtin cd $BBDOTFILES_DIR;
    builtin cd $DOTFILES_DIR;
    builtin history "$@"
    builtin history -a;
    builtin history -c;
    builtin history -r;
    c="$branch_color$c";
    case "$#" in 
    case "$upstream" in 
    cat  <<EOH
    cat  <<EOUSAGE
    cleandirlist;
    cmd-echo "$@"
    cmd-echo "$@"
    cp -v "$HISTFILE" "$(dirname "$HISTFILE")/$1"
    curl -L $1/api/v3/user 2> /dev/null | grep --color=auto --color=auto documentation_url | sed 's|.*enterprise/||' | sed 's|/.*||'
    declare -n array_alias="$1";
    declare -n array_alias="$1";
    delpath -x -c -p MANPATH "$roottodel/man"
    delpath -x -c -p PATH "$roottodel/bin";
    delpath -x -c -p PERL5LIB "$roottodel/lib/perl5";
    delpath -x -c -p PERL5LIB "$roottodel/lib/perl5/site_perl";
    delpath -x -c -p PERL5LIB "$roottodel/lib/perl5/site_perl/$pcv";
    delpath -x -c -p PERL5LIB "$roottodel/share/perl5";
    delpath -x -c -p PERL5LIB "$roottodel/share/perl5/site_perl";
    delpath -x -c -p PERL5LIB "$roottodel/share/perl5/site_perl/$pcv";
    devgit-clone "$@"
    devgit-delete-repo "$@"
    dirlist "$@"
    dirlist "$@"
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    done
    done
    done
    done
    done < $TEMP;
    done <<< "$output";
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    dpkg-change-request --cancel $@;
    dpkg-query-portal "$@"
    dpkg-query-portal $(dpkg-portal-base-uri)/distributions | grep --color=auto --color=auto distribution_series | sort -u
    echo
    echo "       'remote' defaults to 'origin'."
    echo "       Rebase your branch from another remote branch.";
    echo "       TBD"
    echo "       TBD"
    echo "## WARNING:$iam - default color is grey" 1>&2;
    echo "$*";
    echo "$1(repo)"
    echo "$1(repo)"
    echo "$@" )
    echo "$@" 1>&2
    echo "$M" > "$f";
    echo "$cl not found.";
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/bloomberg/data/funcsaudit;
    echo "${TILDAE:-$HOME}/gits/.git-go.$(date +%Y%m%d)"
    echo "Done"
    echo "Usage: $1 --branch otherBranch [--remote remote] [--confirm]";
    echo "Usage: $1 --branch otherBranch [--remote remote] [gitRoot]"
    echo "Usage: $1 [--force] [--yes] [--schedule hours] worktree"
    echo "Usage: git-checkout ...";
    echo "Usage: git-merge-find-usage ...";
    echo "Usage: git-merge-write sha protocol tgtorg tgtrepo tgtbranch srcorg srcrepo srcbranch [merged-by]"
    echo "Usage: git-rename-branch old_branch new_branch"
    echo "Usage: rsyncvm [--verbose|-v] [--help|-h] [--excludeFrom=FileOfExcludes]";
    echo "Usage: toolkit-file-maint [-f|--force|-u|--update]"
    echo "autoload: $1: function source file not found" 1>&2
    echo $((AUTOLOAD_SHIM_OVERHEAD + 3 * ${#1}))
    echo $(dpkg-portal-base-url)/api/0.1
    echo $1 | sed 's/(repo)//'
    echo $1 | sed 's/(repo)//'
    echo ' )'
    echo 'No CVS usage allowed here. Typo?';
    echo 'bloomberg functions are autoloaded';
    echo 'https://blp-dpkg.dev.bloomberg.com'
    echo 'personal functions are autoloaded';
    echo -e "\\033]0;$*\\007\\c"
    echo -n "$1:in scoping func dollarZero $0 vs bashsource (";
    echo Usage: dirlist TBD
    echo grey
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    esac;
    esac;
    eval $pathvar="'$newvalue'";
    eval set -- "$OPTSARGS";
    eval set -- "$args";
    eval tmp=\$$pathvar;
    f="/tmp/ticker.$(hostname).$$";
    f="/tmp/ticker.$(hostname).$$";
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    find $(git-root)/.githold -type f "$@" 2> /dev/null
    find ${1:-.} -type f | grep --color=auto --color=auto -v .svn
    for d in $DIRLISTTMP;
    for func in "$@";
    for func in "$@";
    for func in $(declare | grep -E 'local\\{0,1} AUTOLOADED' | sed -e "s/.*AUTOLOADED=//" -e 's/\\//g' -e 's/[");]//g' -e "s/'//g");
    for func in $loadthese;
    for i in "${!array_alias[@]}";
    for i in $(ls ${hook_dir}/* | grep -v '.sample' | grep -v $GITFUNCS_CHANGELOG_NAME);
    for i in $(seq 1 ${#BASH_SOURCE[@]});
    for i in $files;
    for i in $toedit;
    for option in ${GIT_PS1_SHOWUPSTREAM};
    for p in $( _autoload_split_fpath );
    git checkout $(git-find-last-existed "$1") "$1"
    git checkout -- "$@"
    git config -f ${TILDAE:-$HOME}/.gitconfig.merge_audit --list | grep --color=auto --color=auto "$@"
    git gui "$@" &
    git log --all --graph --pretty=format:'%Cred%h%Creset -%d %s (%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    git log -1 > $(git-root).git-pull-checkpoint;
    git pull "$@"
    git remote -v "$@"
    git remote -v | grep --color=auto --color=auto origin | sed 's|.*/||' | sed 's/ .*//' | sort -u
    git rev-list -n 1 $(git-find-deleted "$1")^ -- "$1"
    git rev-list -n 1 HEAD -- "$1"
    git rev-parse --show-toplevel;
    git status
    git status
    git symbolic-ref HEAD | cut -d/ -f3- )
    git-check-hook "$@"
    git-checkout "$@"
    git-checkout "$@"
    git-clone --proto github "$@";
    git-delete-branch "$@"
    git-delete-current-worktree "$@"
    git-delete-repo --dirmode $(pwd);
    git-delete-repo github "$@";
    git-delete-worktree "$@" $(pwd);
    git-dry-run-hook "$@"
    git-get-current-branch "$@"
    git-get-stash-count "$@"
    git-go -l "$@"
    git-hook-pushpull-guts $(_git-go-get -m | grep -v ".git_template" )
    git-hook-pushpull-guts $(git-worktree-root)
    git-in-a-repo;
    git-in-a-repo;
    git-merge-pull-request "$@"
    git-pull-hook "$@"
    git-push-hook "$@"
    git-rebase-log "$@"
    git-rename-branch "$@"
    git-rename-worktree "$@"
    git-root 2> /dev/null 1>&2;
    git-set-triangle github "$@";
    git-status "$@"
    git-status-with-changelog "$@"
    git-status-with-changelog "$@"
    git-sync-with-master "$@"
    git-sync-with-master "$@"
    git-track-remote-branch "$@"
    git-what-is-deleted "$@"
    git-what-is-ignored "$@"
    git-what-is-modified "$@"
    git-what-is-modified "$@"
    git-what-is-staged "$@"
    git-what-is-staged "$@"
    git-what-is-unmodified "$@"
    git-what-is-unstaged "$@"
    git-what-is-untracked "$@"
    git-worktree-create "$@"
    git-worktree-create "$@"
    git-worktree-create "$@"
    git-worktree-create --fetch "$@";
    git-worktree-diff-to-root --reverse "$@";
    git_add_remote "$@"
    grep --color=auto --color=auto "$@" $(git-hold-find)
    grep --color=auto --color=auto -L "$@"
    hf="$(basename "$HISTFILE")";
    i=0;
    i=0;
    iam=$(func-name-spoof);
    if (( $# == 0 )); then
    if ((!$assigned)); then
    if ((${#REPOS[@]}==0)); then
    if [ ! "$?" = "${TRUE}" ]; then
    if [ "$1" = '--nopwd' ]; then
    if [ "$?" = $TRUE ]; then
    if [ "$?" = $TRUE ]; then
    if [ "$rev_parse_exit_code" = "0" ]; then
    if [ "$tmp" = "" ]; then
    if [ "$w" = "*" ]; then
    if [ "${TILDAE:-$HOME}" == "$p" ]; then
    if [ "true" = "$inside_gitdir" ]; then
    if [ "true" = "$inside_worktree" ] && [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] && [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] && git check-ignore -q .; then
    if [ $detached = no ]; then
    if [ $options_num_args_left -eq 0 ] && [ -z "$opt_r" ]; then
    if [ $options_num_args_left -eq 0 ]; then
    if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
    if [ $pcmode = yes ] && [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
    if [ $pcmode = yes ]; then
    if [ -d "$g/rebase-merge" ]; then
    if [ -n "$1" ]; then
    if [ -n "$NEWXCOLOR" ]; then
    if [ -n "$REPO" ]; then
    if [ -n "$SHELL" ] && [ "$(basename "$SHELL")" = "bash" ]; then
    if [ -n "$XTERM_SHELL" ]; then
    if [ -n "$dotgit" ] && [ -d $dotgit/hooks ]; then
    if [ -n "$dumpopt" ]; then
    if [ -n "$i" ]; then
    if [ -n "$negs" ]; then
    if [ -n "$opt_c" ]; then
    if [ -n "$opt_e" ] && [ -n "$opt_c" ]; then
    if [ -n "$opt_h" ]; then
    if [ -n "$opt_h" ]; then
    if [ -n "$options_missing_arg" ]; then
    if [ -n "$options_missing_arg" ]; then
    if [ -n "$options_unknown_option" ]; then
    if [ -n "$options_unknown_option" ]; then
    if [ -n "$s" ]; then
    if [ -n "$step" ] && [ -n "$total" ]; then
    if [ -n "$u" ]; then
    if [ -r "$f" ]; then
    if [ -t "$1" ]; then
    if [ -z "$1" ]; then
    if [ -z "$1" ]; then
    if [ -z "$XFUNCS_X_IS_AVAILABLE" ]; then
    if [ -z "$histinited" ] || [ "$1" = '--force' ]; then
    if [ -z "$hook_dir" ] || [ ! -d "$hook_dir" ]; then
    if [ -z "$repo_info" ]; then
    if [ -z ${host} ]; then
    if [[ ! -n "$FPATH" ]]; then
    if [[ "$tgt" =~ /$ ]]; then
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n $file ]]; then
    if [[ -n ${ZSH_VERSION-} ]]; then
    if [[ -z "$legacy" ]]; then
    if [[ -z "$verbose" ]]; then
    is-int "$1" && (( $1 < 0 )) && return "$OK";
    is-neg "$1" && return "$NOT_OK";
    listpath -s "${sep}" -p $pathvar | grep --color=auto --color=auto -v $MATCH "$delit" > $TEMP;
    loadthese=$(echo $loadthese | tr '[ ]' '[\n]' | grep -v '#');
    local -a REPOS;
    local -a wcstriplist;
    local AUTOLOADED='_listkv';
    local AUTOLOADED='_rsyncvm_usage';
    local AUTOLOADED='_toolkit-file-maint-usage';
    local AUTOLOADED='aclear';
    local AUTOLOADED='add_bb';
    local AUTOLOADED='addpath';
    local AUTOLOADED='addvm';
    local AUTOLOADED='ajoin';
    local AUTOLOADED='apop';
    local AUTOLOADED='asplit_to_array';
    local AUTOLOADED='asplit_to_stdout';
    local AUTOLOADED='aunshift';
    local AUTOLOADED='autoloaded-bloomberg';
    local AUTOLOADED='autoloaded-personal';
    local AUTOLOADED='bash_history_index';
    local AUTOLOADED='bash_history_reindex';
    local AUTOLOADED='bash_history_sync';
    local AUTOLOADED='bbdotfileadd';
    local AUTOLOADED='bbdotfilessync';
    local AUTOLOADED='bbgitcheck_bbdotfiles';
    local AUTOLOADED='bbgithub-server-version';
    local AUTOLOADED='bbsyncbbdotfiles';
    local AUTOLOADED='cattail';
    local AUTOLOADED='cd+';
    local AUTOLOADED='cleandirlist';
    local AUTOLOADED='co';
    local AUTOLOADED='comment-stream';
    local AUTOLOADED='delpath';
    local AUTOLOADED='delvm';
    local AUTOLOADED='dirlist';
    local AUTOLOADED='dirlist_usage';
    local AUTOLOADED='dotfileadd';
    local AUTOLOADED='dotfilessync';
    local AUTOLOADED='dpkg-cancel-request';
    local AUTOLOADED='dpkg-list-series';
    local AUTOLOADED='dpkg-portal-base-uri';
    local AUTOLOADED='dpkg-portal-base-url';
    local AUTOLOADED='dpkg-portal-query';
    local AUTOLOADED='dpkg-psql-start';
    local AUTOLOADED='dpkgrepo-says';
    local AUTOLOADED='eddirlist';
    local AUTOLOADED='func-echo';
    local AUTOLOADED='func-pick';
    local AUTOLOADED='func-yesno';
    local AUTOLOADED='git-add-repo-tag';
    local AUTOLOADED='git-br';
    local AUTOLOADED='git-branch-delete';
    local AUTOLOADED='git-branch-get-current';
    local AUTOLOADED='git-branch-rename';
    local AUTOLOADED='git-branches';
    local AUTOLOADED='git-cat-cl';
    local AUTOLOADED='git-check-hook';
    local AUTOLOADED='git-check-with-remote-usage';
    local AUTOLOADED='git-checkout-last-existed';
    local AUTOLOADED='git-checkout-usage';
    local AUTOLOADED='git-clone-bbgithub';
    local AUTOLOADED='git-clone-devgit';
    local AUTOLOADED='git-clone-github';
    local AUTOLOADED='git-create-worktree';
    local AUTOLOADED='git-delete-current-repo';
    local AUTOLOADED='git-delete-current-worktree';
    local AUTOLOADED='git-delete-repo-bbgithub';
    local AUTOLOADED='git-delete-repo-devgit';
    local AUTOLOADED='git-delete-repo-github';
    local AUTOLOADED='git-delete-worktree-usage';
    local AUTOLOADED='git-fetch-remote-branch';
    local AUTOLOADED='git-find-deleted';
    local AUTOLOADED='git-find-last-existed';
    local AUTOLOADED='git-get-current-branch';
    local AUTOLOADED='git-get-current-repo-name';
    local AUTOLOADED='git-get-default-remote';
    local AUTOLOADED='git-get-stash-count';
    local AUTOLOADED='git-go';
    local AUTOLOADED='git-go-get-filename';
    local AUTOLOADED='git-go-set-filename';
    local AUTOLOADED='git-gui';
    local AUTOLOADED='git-hold-clean';
    local AUTOLOADED='git-hold-find';
    local AUTOLOADED='git-hold-grep';
    local AUTOLOADED='git-hold-list';
    local AUTOLOADED='git-hook-check';
    local AUTOLOADED='git-hook-dry-run';
    local AUTOLOADED='git-hook-find-hook-dir';
    local AUTOLOADED='git-hook-pull';
    local AUTOLOADED='git-hook-push';
    local AUTOLOADED='git-in-a-repo';
    local AUTOLOADED='git-is-committable';
    local AUTOLOADED='git-is-deleted';
    local AUTOLOADED='git-is-ignored';
    local AUTOLOADED='git-is-mod';
    local AUTOLOADED='git-is-modified';
    local AUTOLOADED='git-is-staged';
    local AUTOLOADED='git-is-unmodified';
    local AUTOLOADED='git-is-unstaged';
    local AUTOLOADED='git-is-untracked';
    local AUTOLOADED='git-list';
    local AUTOLOADED='git-log-rebase';
    local AUTOLOADED='git-logg';
    local AUTOLOADED='git-merge-find-branch';
    local AUTOLOADED='git-merge-find-usage';
    local AUTOLOADED='git-merge-pr';
    local AUTOLOADED='git-merge-write-usage';
    local AUTOLOADED='git-pull-hook';
    local AUTOLOADED='git-pull-usage';
    local AUTOLOADED='git-pull-with-checkpoint';
    local AUTOLOADED='git-push-hook';
    local AUTOLOADED='git-rebase-on-master';
    local AUTOLOADED='git-remote-add';
    local AUTOLOADED='git-remotes';
    local AUTOLOADED='git-rename-branch-usage';
    local AUTOLOADED='git-revert';
    local AUTOLOADED='git-root';
    local AUTOLOADED='git-set-triangle-github';
    local AUTOLOADED='git-st';
    local AUTOLOADED='git-st-ch';
    local AUTOLOADED='git-st-cl';
    local AUTOLOADED='git-stash-get-count';
    local AUTOLOADED='git-strip-repo';
    local AUTOLOADED='git-sync-with-remote-usage';
    local AUTOLOADED='git-update';
    local AUTOLOADED='git-worktree';
    local AUTOLOADED='git-worktree-delete-current';
    local AUTOLOADED='git-worktree-diff-from-root';
    local AUTOLOADED='git-worktree-fetch';
    local AUTOLOADED='git-worktree-rename';
    local AUTOLOADED='git-wt';
    local AUTOLOADED='gitcheck_dotfiles';
    local AUTOLOADED='go';
    local AUTOLOADED='govm';
    local AUTOLOADED='grep-not-in';
    local AUTOLOADED='histinit';
    local AUTOLOADED='history';
    local AUTOLOADED='is-int';
    local AUTOLOADED='is-interactive';
    local AUTOLOADED='is-neg';
    local AUTOLOADED='is-pos';
    local AUTOLOADED='is-redirected';
    local AUTOLOADED='is_func_defined';
    local AUTOLOADED='mount-sshfs';
    local AUTOLOADED='options';
    local AUTOLOADED='pathfunc_usage_init';
    local AUTOLOADED='pause';
    local AUTOLOADED='perl-add-local';
    local AUTOLOADED='perl-add-root';
    local AUTOLOADED='perl-current-version';
    local AUTOLOADED='perl-del-local';
    local AUTOLOADED='perl-del-root';
    local AUTOLOADED='perl-find-code';
    local AUTOLOADED='perl-list-local';
    local AUTOLOADED='perl-module-apt-install';
    local AUTOLOADED='perl-module-new-tar';
    local AUTOLOADED='pwdswap';
    local AUTOLOADED='rename_history';
    local AUTOLOADED='safe_func_export';
    local AUTOLOADED='script-echo';
    local AUTOLOADED='sep2line';
    local AUTOLOADED='setdirlist';
    local AUTOLOADED='show_current_history';
    local AUTOLOADED='show_history';
    local AUTOLOADED='showvm';
    local AUTOLOADED='simon-says';
    local AUTOLOADED='stash_history';
    local AUTOLOADED='stderrcho';
    local AUTOLOADED='svn-add-repo';
    local AUTOLOADED='svn-find';
    local AUTOLOADED='svn-go-set-filename';
    local AUTOLOADED='svn-review';
    local AUTOLOADED='svn-review-update';
    local AUTOLOADED='svn-strip-repo';
    local AUTOLOADED='syncdotfiles';
    local AUTOLOADED='tarcp';
    local AUTOLOADED='toolkit-expire-check';
    local AUTOLOADED='toolkit-is-expired';
    local AUTOLOADED='toolkit-maint';
    local AUTOLOADED='umount-MBIG';
    local AUTOLOADED='umount-nfs';
    local AUTOLOADED='umount-sshfs';
    local AUTOLOADED='vm-toolkit-file-maint';
    local AUTOLOADED='vmsync';
    local AUTOLOADED='wcstrip';
    local AUTOLOADED='x-current-root-guts';
    local AUTOLOADED='x-current-root-height';
    local AUTOLOADED='x-current-root-width';
    local AUTOLOADED='x-is-available';
    local IFS="$1";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local IS_SHIM="$func";
    local M="::: $* :::";
    local OPTSARGS=$(getoptp -o h --long nosavetarget,nosavecurrent -n 'dirlist' -- "$@");
    local PS3="Choose by number, /string to rematch, q to quit: ";
    local S;
    local T="$M$M$M$M";
    local args;
    local array_name="$1";
    local array_name="$1";
    local assigned=0;
    local b="";
    local bad_color=$c_red;
    local bare_repo="${repo_info##*
    local bg;
    local branch_color="";
    local c;
    local c="";
    local cl=$(git-root)/$GITFUNCS_CHANGELOG_NAME;
    local col=$1;
    local colors;
    local comment="$1";
    local count=1;
    local current;
    local d;
    local detached=no;
    local doevalshim=0;
    local doexport=0;
    local dofpath=0;
    local doreload=0;
    local dotgit=$(git-find-git-dir);
    local doverbose=0;
    local dumpopt;
    local executed='';
    local exit=$?;
    local exported='';
    local exported=0;
    local f;
    local f;
    local f="$1";
    local f="$w$i$s$u";
    local file=$(_autoload_resolve Usage);
    local file=$(_autoload_resolve _bbsave-dotfile-entry);
    local file=$(_autoload_resolve _dirlist_select);
    local file=$(_autoload_resolve _git-cd-return);
    local file=$(_autoload_resolve _git-cd-to);
    local file=$(_autoload_resolve _git-cd-unwind);
    local file=$(_autoload_resolve _rsync2nfs_usage);
    local file=$(_autoload_resolve _save-dotfile-entry);
    local file=$(_autoload_resolve acopy);
    local file=$(_autoload_resolve acount);
    local file=$(_autoload_resolve aeach);
    local file=$(_autoload_resolve aindicies);
    local file=$(_autoload_resolve aptperl);
    local file=$(_autoload_resolve apush);
    local file=$(_autoload_resolve aset);
    local file=$(_autoload_resolve ashift);
    local file=$(_autoload_resolve asplice);
    local file=$(_autoload_resolve asplit);
    local file=$(_autoload_resolve asplit-to-array);
    local file=$(_autoload_resolve asplit-to-stdout);
    local file=$(_autoload_resolve autoload-edit-group);
    local file=$(_autoload_resolve avalues);
    local file=$(_autoload_resolve bash_current_version_compare);
    local file=$(_autoload_resolve bbadddotfile);
    local file=$(_autoload_resolve bbdotfilesfuncs-help);
    local file=$(_autoload_resolve bbgithub-clone);
    local file=$(_autoload_resolve bbgithub-merge-pull-request);
    local file=$(_autoload_resolve bbgithub-set-locals);
    local file=$(_autoload_resolve bbgithub-set-triangle);
    local file=$(_autoload_resolve bbgithub-whack);
    local file=$(_autoload_resolve bbmakesshconfig);
    local file=$(_autoload_resolve bbmakesymlinks);
    local file=$(_autoload_resolve bbshowdotfiles);
    local file=$(_autoload_resolve cat_history);
    local file=$(_autoload_resolve check-nfsmachines);
    local file=$(_autoload_resolve cmd-echo);
    local file=$(_autoload_resolve dashstripper);
    local file=$(_autoload_resolve devgit-clone);
    local file=$(_autoload_resolve devgit-delete-repo);
    local file=$(_autoload_resolve dowhich);
    local file=$(_autoload_resolve dpkg-list-distros);
    local file=$(_autoload_resolve dpkg-psql);
    local file=$(_autoload_resolve dpkg-psql-dump-prod);
    local file=$(_autoload_resolve dpkg-psql-load-local);
    local file=$(_autoload_resolve dpkg-psql-query-change);
    local file=$(_autoload_resolve dpkg-psql-query-change-log);
    local file=$(_autoload_resolve dpkg-psql-query-change-log-usage);
    local file=$(_autoload_resolve dpkg-test-build);
    local file=$(_autoload_resolve dpkg-test-build-usage);
    local file=$(_autoload_resolve dpkg-test-rebuild);
    local file=$(_autoload_resolve dpkg-test-rebuild-usage);
    local file=$(_autoload_resolve dpkgrefrepos);
    local file=$(_autoload_resolve editor_opt);
    local file=$(_autoload_resolve edpath);
    local file=$(_autoload_resolve func-name-spoof);
    local file=$(_autoload_resolve func-usage);
    local file=$(_autoload_resolve get-next-descriptor);
    local file=$(_autoload_resolve git-branch-info);
    local file=$(_autoload_resolve git-branch-info-pull-request);
    local file=$(_autoload_resolve git-check-with-master);
    local file=$(_autoload_resolve git-checkout);
    local file=$(_autoload_resolve git-clone);
    local file=$(_autoload_resolve git-clone-usage);
    local file=$(_autoload_resolve git-delete-branch);
    local file=$(_autoload_resolve git-delete-repo);
    local file=$(_autoload_resolve git-delete-repo-usage);
    local file=$(_autoload_resolve git-delete-worktree);
    local file=$(_autoload_resolve git-diff-faq);
    local file=$(_autoload_resolve git-diff-to-checkpoint);
    local file=$(_autoload_resolve git-diff-two-repos-on-disk-usage);
    local file=$(_autoload_resolve git-dry-run-hook);
    local file=$(_autoload_resolve git-find);
    local file=$(_autoload_resolve git-find-conflicts);
    local file=$(_autoload_resolve git-find-git-dir);
    local file=$(_autoload_resolve git-find-usage);
    local file=$(_autoload_resolve git-go-set);
    local file=$(_autoload_resolve git-grep);
    local file=$(_autoload_resolve git-hold);
    local file=$(_autoload_resolve git-hold-diff);
    local file=$(_autoload_resolve git-hold-remove);
    local file=$(_autoload_resolve git-hold-restore);
    local file=$(_autoload_resolve git-in-a-worktree);
    local file=$(_autoload_resolve git-is-edited);
    local file=$(_autoload_resolve git-log-shas-range);
    local file=$(_autoload_resolve git-merge-find);
    local file=$(_autoload_resolve git-merge-pull-request);
    local file=$(_autoload_resolve git-merge-pull-request-usage);
    local file=$(_autoload_resolve git-merge-write);
    local file=$(_autoload_resolve git-parse-remote-v);
    local file=$(_autoload_resolve git-post-new);
    local file=$(_autoload_resolve git-pull);
    local file=$(_autoload_resolve git-regressive-diffs);
    local file=$(_autoload_resolve git-rename-branch);
    local file=$(_autoload_resolve git-rename-worktree);
    local file=$(_autoload_resolve git-rename-worktree-usage);
    local file=$(_autoload_resolve git-restore);
    local file=$(_autoload_resolve git-set-triangle);
    local file=$(_autoload_resolve git-set-triangle-usage);
    local file=$(_autoload_resolve git-st-ext);
    local file=$(_autoload_resolve git-st-ext-all);
    local file=$(_autoload_resolve git-st-por);
    local file=$(_autoload_resolve git-st-por-usage);
    local file=$(_autoload_resolve git-sync-with-master);
    local file=$(_autoload_resolve git-to-stdout);
    local file=$(_autoload_resolve git-to-stdout-last-existed);
    local file=$(_autoload_resolve git-to-stdout-usage);
    local file=$(_autoload_resolve git-update-this-hook);
    local file=$(_autoload_resolve git-worktree-create);
    local file=$(_autoload_resolve git-worktree-diff-to-root);
    local file=$(_autoload_resolve git-worktree-root);
    local file=$(_autoload_resolve github-clone);
    local file=$(_autoload_resolve heach);
    local file=$(_autoload_resolve hist-index-unlock);
    local file=$(_autoload_resolve hist_with_pwd);
    local file=$(_autoload_resolve hkeys);
    local file=$(_autoload_resolve hvalues);
    local file=$(_autoload_resolve list);
    local file=$(_autoload_resolve listpath);
    local file=$(_autoload_resolve load_history);
    local file=$(_autoload_resolve makepstree);
    local file=$(_autoload_resolve makesymlinks);
    local file=$(_autoload_resolve mount-MBIG);
    local file=$(_autoload_resolve mount-nfs);
    local file=$(_autoload_resolve new_history);
    local file=$(_autoload_resolve perl-filter-code);
    local file=$(_autoload_resolve perl-list-root);
    local file=$(_autoload_resolve perl-module-new-repo);
    local file=$(_autoload_resolve perl-module-new-repo-usage);
    local file=$(_autoload_resolve perl-module-new-zip);
    local file=$(_autoload_resolve perl-script-new-repo);
    local file=$(_autoload_resolve perlx);
    local file=$(_autoload_resolve pick);
    local file=$(_autoload_resolve prunedirlist);
    local file=$(_autoload_resolve python_dbg);
    local file=$(_autoload_resolve readdirlist);
    local file=$(_autoload_resolve repl);
    local file=$(_autoload_resolve rsync2nfs);
    local file=$(_autoload_resolve rsyncvm-diff);
    local file=$(_autoload_resolve rsyncvm-pause);
    local file=$(_autoload_resolve rsyncvm-resume);
    local file=$(_autoload_resolve rsyncvm-running);
    local file=$(_autoload_resolve rsyncvm-snapshot-diff);
    local file=$(_autoload_resolve rsyncvmgits);
    local file=$(_autoload_resolve script-usage);
    local file=$(_autoload_resolve searchpath);
    local file=$(_autoload_resolve set-nfsmachine);
    local file=$(_autoload_resolve showdotfiles);
    local file=$(_autoload_resolve smartwc);
    local file=$(_autoload_resolve snapshot-diff);
    local file=$(_autoload_resolve snapshot-go);
    local file=$(_autoload_resolve snapshot-restore);
    local file=$(_autoload_resolve svn-checkout);
    local file=$(_autoload_resolve svn-get-root);
    local file=$(_autoload_resolve svn-go);
    local file=$(_autoload_resolve svn-go-get);
    local file=$(_autoload_resolve svn-go-set);
    local file=$(_autoload_resolve svn-go-usage);
    local file=$(_autoload_resolve svn-help);
    local file=$(_autoload_resolve svn-st-por);
    local file=$(_autoload_resolve svn-st-por-usage);
    local file=$(_autoload_resolve svn-stash);
    local file=$(_autoload_resolve tail_number_add);
    local file=$(_autoload_resolve tail_number_strip);
    local file=$(_autoload_resolve tarcopy);
    local file=$(_autoload_resolve tkpod);
    local file=$(_autoload_resolve toolkit-expires-in);
    local file=$(_autoload_resolve toolkit-file-check);
    local file=$(_autoload_resolve toolkit-file-maint);
    local file=$(_autoload_resolve uniqpath);
    local file=$(_autoload_resolve up);
    local file=$(_autoload_resolve uuid);
    local file=$(_autoload_resolve vmadd);
    local file=$(_autoload_resolve vmchoose);
    local file=$(_autoload_resolve vmdel);
    local file=$(_autoload_resolve vmgo);
    local file=$(_autoload_resolve vmrebuild);
    local file=$(_autoload_resolve vmshow);
    local file=$(_autoload_resolve writedirlist);
    local file=$(_autoload_resolve yesno);
    local files="$@";
    local first_two;
    local flags_color="$c_lblue";
    local func;
    local func;
    local func;
    local func;
    local g="${repo_info%
    local ghf=$(git-hold-find);
    local gitstring="$c$b${f:+$z$f}$r$p";
    local hf;
    local hook_dir=$(git-hook-find-hook-dir);
    local host="${1}";
    local i;
    local i;
    local i="";
    local i=0;
    local i=0;
    local iam;
    local index_file=$(dirname $HISTFILE)/.index;
    local inside_gitdir="${repo_info##*
    local inside_worktree="${repo_info##*
    local j=$i;
    local key value;
    local line;
    local loaded=0;
    local loadthese;
    local more_opts=1;
    local moreopts;
    local neg_carr;
    local negs;
    local newvalue;
    local no0=0;
    local ok_color=$c_green;
    local opt OPTIND OPTARG;
    local opt OPTIND;
    local opt OPTIND;
    local opt_exact='';
    local opt_gse=0;
    local opt_list=0;
    local opt_mbig='';
    local opt_mod=0;
    local opt_p='';
    local opt_repo_no=0;
    local opt_repo_sel='';
    local opt_roots='';
    local opt_s='';
    local opt_subwt_only='';
    local opt_update='';
    local opt_wt='-w';
    local optimize=0;
    local optimized=0;
    local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')";
    local p;
    local p;
    local p="";
    local passthru;
    local pcmode=no;
    local pcv;
    local pcv;
    local post=$1;
    local post=$1;
    local pre=$1;
    local pre=$1;
    local printf_format=' (%s)';
    local prompt_text;
    local prompt_text="$(func-echo -n '')$1";
    local ps1_expanded=yes;
    local ps1pc_end='\$ ';
    local ps1pc_start='\u@\h:\w ';
    local r="";
    local repo_info rev_parse_exit_code;
    local ret=0;
    local roottoadd=$1;
    local roottodel=$1;
    local s="";
    local short_sha="";
    local step="";
    local summary=0;
    local svn_remote svn_url_pattern count n;
    local target;
    local tgt;
    local tgt=$1;
    local timemarker=$(mktemp --suffix=.${FUNCNAME});
    local toedit;
    local topage;
    local total="";
    local u="";
    local upstream=git legacy="" verbose="" name="";
    local usage_func="git-clone-usage";
    local usage_func="git-delete-repo-usage";
    local usage_func="git-set-triangle-usage";
    local var;
    local w="";
    local xtermgeow=$XTERMGEOW;
    local z="${GIT_PS1_STATESEPARATOR-" "}";
    ls --color=auto --color=auto -la "$HISTFILE"
    ls --color=auto --color=auto -lrt "$(dirname "$HISTFILE")" | sed "s|$hf|${hf}=current|"
    ls --color=auto --color=auto -rt ${TILDAE:-$HOME}/gits/.git-go.* | head -1
    makesymlinks "$@"
    makesymlinks "$@"
    moreopts=1;
    mount-nfs && mount-MBIG;
    options "hp:s:xvecr:" "$@";
    options "hp:s:xvfbi:" "$@";
    options_missing_arg=;
    options_num_args_left=0;
    options_shift_val="$num";
    options_shift_val=0;
    options_unknown_option=;
    opts=":$1";
    p=$(pwd);
    pathfunc_usage_init;
    pathfunc_usage_init;
    pcv=$(perl-current-version);
    pcv=$(perl-current-version);
    perl -MConfig -MData::Dumper -e '$x=$Config{version};$x=~s/(\.[0-9]+$)//;print $x'-- "$1"
    perl -e 'open(IH, "<$ARGV[0]");@lines=<IH>;close(IH);
    perl-add-root "${TILDAE:-$HOME}/local"
    perl-del-root "$roottoadd";
    perl-del-root "${TILDAE:-$HOME}/perl"
    perl-filter-code "$(find "$@")";
    perl-list-root "${TILDAE:-$HOME}/perl"
    pick "$prompt_text" "$@"
    prompt_text="$(func-echo -n '')$1";
    pwd | sed "s|$1|$2|"
    r="$c_clear$r"
    read -r -p "$@";
    readarray -t REPOS < <(_git-go-get $opt_update $opt_roots $opt_mbig $opt_wt $opt_subwt_only $opt_exact "$tgt");
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir 		--is-bare-repository --is-inside-work-tree 		--short HEAD 2>/dev/null)";
    repo_info="${repo_info%
    repo_info="${repo_info%
    return
    return "$OK"
    return "$OK"
    return "$TRUE"
    return $(true)
    return $(true)
    return $(true)
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $?
    return $NOT_OK
    return $OK
    return $XFUNCS_X_IS_AVAILABLE
    return $exit
    return $status
    return $status
    return 1
    return 1
    return 1
    rev_parse_exit_code="$?";
    rm -f "/tmp/ticker.$(hostname).$$"
    rm -rf $(git-root)/.githold
    roottoadd="$(realpath "$roottoadd")";
    roottodel="$(realpath "$roottodel")";
    rsyncvm "$@"
    sep=${1:-:};
    set +x;
    set -- ${FPATH};
    setdirlist $current;
    setdirlist $target
    shift $(($OPTIND-1));
    shift $(($OPTIND-1));
    shift $(($OPTIND-1));
    shift $options_shift_val;
    shift $options_shift_val;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    shift;
    status=$?;
    status=$?;
    status=0;
    sudo "$@"
    sudo -u dpkgrepo "$@"
    sudo -u postgres $PSQL_SERVER_BIN/pg_ctl -D $PSQL_SERVER_DATA -l $PSQL_SERVER_ROOT/log/logfile start &
    sudo umount $SSHFS_LOCALHOME && rmdir $SSHFS_LOCALHOME
    sudo umount $tgt && rmdir $tgt
    svn_remote=();
    tail -n +1 -f "$@";
    tar -zxf $1 --strip-components=1
    tarcopy "$@"
    test -r "$f" && read "$@" < "$f"
    tgt=$1;
    toolkit-expires-in 0;
    toolkit-file-check "$@"
    toolkit-file-maint "$@"
    toolkit-file-maint "$@"
    tty > /dev/null
    type "$1" 2> /dev/null | head -1 | grep --color=auto --color=auto -q 'is a function'
    typeset -a USAGE;
    typeset -a USAGE;
    typeset OPTIONS_WRONG_ARGS=1;
    typeset opt_e opt_c opt_r;
    typeset opt_f opt_b opt_i;
    typeset opt_h opt_p opt_s;
    typeset opt_h opt_p opt_s;
    typeset opt_x opt_v;
    typeset opt_x opt_v;
    typeset options_num_args_left;
    typeset options_num_args_left;
    typeset options_shift_val options_missing_arg options_unknown_opt;
    typeset options_shift_val options_missing_arg options_unknown_opt;
    typeset opts argname num;
    typeset pathvar COMMAND dirname tmp element TEMP;
    typeset pathvar new_path MATCH pathspec TEMP;
    typeset sep=:;
    typeset sep=:;
    umount-nfs && umount-MBIG;
    unset -f "$@"
    vmadd "$@"
    vmdel "$@"
    vmgo "$@"
    vmshow "#@"
    while ((i<count)); do
    while ((more_opts)) && [[ "$1" =~ ^- ]]; do
    while [ -n "$1" ]; do
    while [[ "$1" =~ ^- ]] && ((moreopts)); do
    while getopts "$opts" argname; do
    while getopts ps opt; do
    while getopts psuema:yxrvlohfw opt; do
    while getopts xrvla:oyf opt; do
    while read -r key value; do
    while read -r line; do
    while read line; do
    while sleep .2s && [ -r "$f" ]; do
    while true; do
    writedirlist --edit
    x-current-root-guts "width";
    x-current-root-guts height;
    x-is-available;
    xterm_Xground 10
    xterm_Xground 11
    xwininfo -root | grep --color=auto --color=auto -i "$1:" | sed 's/.* //';
    yesno "$prompt_text" "$@"
    z="$c_clear$z";
 $index{$ARGV[1]}={start=>$start,end=>$end};
 ($end=$ARGV[3])=~ s/#([0-9]+).*/$1/;
 ($start=$ARGV[2])=~ s/#([0-9]+).*/$1/;
 chomp $lines[-2];$lines[-2]=~s/ ## pwd =>.*//;$lines[-2].= " ## pwd => $ARGV[1]\n";
 open(OH, ">$ARGV[0]");print OH @lines;close(OH)' $HISTFILE "$(pwd)";
 print Data::Dumper->Dump([\%index],[qw(*index)])' $index_file $i "$start" "$end" > $my_index_file;
## pwd => The current directory AFTER the command. 'AFTER' only matters if a cd was involved.
#$(date +%s)
*}";
*}";
*}";
*}";
ALTERNATE_EDITOR=/usr/bin/vim
ANSI_BG_black='\e[40m'
ANSI_BG_blue='\e[44m'
ANSI_BG_cyan='\e[46m'
ANSI_BG_green='\e[42m'
ANSI_BG_magenta='\e[45m'
ANSI_BG_red='\e[41m'
ANSI_BG_white='\e[47m'
ANSI_BG_yellow='\e[43m'
ANSI_FG_black='\e[30m'
ANSI_FG_blue='\e[34m'
ANSI_FG_cyan='\e[36m'
ANSI_FG_green='\e[32m'
ANSI_FG_magenta='\e[35m'
ANSI_FG_red='\e[31m'
ANSI_FG_white='\e[37m'
ANSI_FG_yellow='\e[33m'
ANSI_blink='\e[5m'
ANSI_bold='\e[1m'
ANSI_concealed='\e[8m'
ANSI_reset='\e[0m'
ANSI_reverse='\e[7m'
ANSI_underscore='\e[4m'
AUTOLOAD_SHIM_OVERHEAD=268
BASH=/opt/bb/bin/bash
BASHOPTS=cmdhist:complete_fullquote:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath
BASH_ALIASES=()
BASH_ARGC=()
BASH_ARGV=()
BASH_CMDS=()
BASH_INC_DIR=/home/mpersico5/personal/bin
BASH_LINENO=([0]="0")
BASH_SOURCE=([0]="/home/mpersico5/examples/bash/script_caller/outer")
BASH_VERSINFO=([0]="4" [1]="3" [2]="42" [3]="1" [4]="release" [5]="x86_64-unknown-linux-gnu")
BASH_VERSION='4.3.42(1)-release'
BBDOTFILESENV_LOADED=1
BBDOTFILES_DIR=/home/mpersico5/bloomberg/dotfiles
BBDOTFILES_MANIFEST=/home/mpersico5/bloomberg/dotfiles/dotfiles.manifest
BBDOTFILES_OLDDIR=/home/mpersico5/bloomberg/dotfiles_old
BBGITENV_LOADED=1
BBGITFUNCS_PATH=/home/mpersico5/personal/bin/git
BLOOMBERGBIN=/home/mpersico5/bloomberg/bin
BLOOMBERGDATA=/home/mpersico5/bloomberg/data
BLOOMBERGROOT=/home/mpersico5/bloomberg
CDENV_LOADED=1
CRON=false
DESCRIPTION
DIRLIST_PWD_INDIC='==>'
DIRSTACK=()
DISPLAY=localhost:10.0
DOTFILES_DIR=/home/mpersico5/personal/dotfiles
DOTFILES_MANIFEST=/home/mpersico5/personal/dotfiles/dotfiles.manifest
DOTFILES_OLDDIR=/home/mpersico5/personal/dotfiles_old
EDITOR='emacsclient -c'
EOF
EOH
EOUSAGE
EUID=17245
FALSE=1
FPATH=/home/mpersico5/bloomberg/functions:/home/mpersico5/personal/functions
GITENV_LOADED=1
GITFUNCS_CHANGELOG_NAME=SourceCtrlLog
GROUPS=()
HISTCONTROL=ignoredups
HISTENV_LOADED=1
HISTFILE=/home/mpersico5/.bash_histories/hist.ip-1-70-18-156.dob1.bcpc.bloomberg.com.2018_04_10_09_51_09.23743
HISTSIZE=9000
HOME=/home/mpersico5
HOSTNAME=ip-1-70-18-156.dob1.bcpc.bloomberg.com
HOSTTYPE=x86_64
IFS=$' \t\n'
LANG=C
LC_ALL=C
LESS=-X
LESSOPEN='||/usr/bin/lesspipe.sh %s'
LOGNAME=mpersico5
LS_COLORS='rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:do=38;5;5:bd=48;5;232;38;5;11:cd=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:'
MACHTYPE=x86_64-unknown-linux-gnu
MAIL=/var/spool/mail/mpersico5
MANPATH=/home/mpersico5/local/man:/home/mpersico5/local/share/man:/home/mpersico5/personal/man:/opt/bb/share/man:/usr/local/share/man:/usr/share/man
MASTER_SHLVL=2
MOP_svnhook_dir=/home/mpersico5/.svn_template
MOP_svnroot=/home/mpersico5/svns
MOP_svnroot_MBIG=/home/mpersico5/MBIG
NAME
NEWXCOLOR=wheat
NOK=1
NOOK=1
NOTES
NOT_OK=1
NO_AT_BRIDGE=1
OK=0
OPTERR=1
OPTIND=1
OPTIONS
OSTYPE=linux-gnu
OS_O=GNU/Linux
PAGER=/usr/bin/less
PATH=/home/mpersico5/personal/bin/git:/home/mpersico5/bloomberg/bin:/opt/bb/bin:/opt/bb/sbin:/home/mpersico5/local/bin:/home/mpersico5/personal/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/mpersico5/examples/bash/script_caller
PERL5LIB=/home/mpersico5/local/lib64/perl5/site_perl/5.16:/home/mpersico5/local/lib64/perl5/site_perl:/home/mpersico5/local/lib64/perl5:/home/mpersico5/local/lib/perl5/site_perl/5.16:/home/mpersico5/local/lib/perl5/site_perl:/home/mpersico5/local/lib/perl5:/home/mpersico5/local/share/perl5/site_perl/5.16:/home/mpersico5/local/share/perl5/site_perl:/home/mpersico5/local/share/perl5
PERLENV_LOADED=1
PERSONALBIN=/home/mpersico5/personal/bin
PERSONALDATA=/home/mpersico5/personal/data
PERSONALROOT=/home/mpersico5/personal
PPID=3444
PS4='+ '
PSQLENV_LOADED=1
PSQL_SERVER_BIN=/home/mpersico5/local/pgsql-9.6.2/bin
PSQL_SERVER_DATA=/home/mpersico5/local/pgsql-9.6.2/data
PSQL_SERVER_ROOT=/home/mpersico5/local/pgsql-9.6.2
PTKDB_CODE_FONT=Consolas
PTKDB_EVAL_FONT=Consolas
PTKDB_EXPRESSION_FONT=Consolas
PWD=/home/mpersico5/examples/bash/script_caller
RSYNCENV_LOADED=1
RSYNCFUNCS_LOG_HOME=/home/mpersico5/rsync2fs
RXCmd () 
SELINUX_LEVEL_REQUESTED=
SELINUX_ROLE_REQUESTED=
SELINUX_USE_CURRENT_RANGE=
SHELL=/opt/bb/bin/bash
SHELLOPTS=braceexpand:hashall:interactive-comments
SHLVL=4
SSHFS_FTPHOST=devsftp.bloomberg.com
SSHFS_FTPPORT=2222
SSHFS_KEY=/home/mpersico5/.ssh/id_rsa.toolkit
SSHFS_LOCALHOME=/home/mpersico5/nfs
SSHFS_LOCALMBIG=/home/mpersico5/MBIG
SSHFS_MBIGNUM=4485
SSH_CLIENT='10.117.4.47 44244 22'
SSH_CONNECTION='10.117.4.47 44244 1.70.18.156 22'
SSH_TTY=/dev/pts/4
SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt
STDERR=2
STDIN=0
STDOUT=1
SVNENV_LOADED=1
SYNOPSIS
TERM=xterm-256color
TILDAE=/home/mpersico5
TOOLKITENV_LOADED=1
TOOLKITFUNCS_BCPCVMS_FILE=/home/mpersico5/bloomberg/bin/.bcpcvms
TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE=/home/mpersico5/.ssh/id_rsa.toolkit.expires
TOOLKITFUNCS_TOOLKIT_FILE=/home/mpersico5/.ssh/id_rsa.toolkit
TOOLKITFUNCS_TOOLKIT_PUB_FILE=/home/mpersico5/.ssh/id_rsa.toolkit.pub
TRUE=0
UID=17245
USAGE
USER=mpersico5
UTILENV_LOADED=1
Usage () 
Usage: git-pull [-t]
VMENV_LOADED=1
VMFUNCS_BCPCVMS_FILE=/home/mpersico5/bloomberg/data/bcpcvms
VMFUNCS_TOOLKIT_EXPIRE_FILE=/home/mpersico5/.ssh/id_rsa.toolkit.expires
VMFUNCS_TOOLKIT_FILE=/home/mpersico5/.ssh/id_rsa.toolkit
WINDOWID=10485794
XDG_RUNTIME_DIR=/run/user/17245
XDG_SESSION_ID=97560
XTERM='/usr/bin/xterm -sb -sl 40000'
XTERMFONTS='-fa '\''Monospace'\'' -fs 10'
XTERMGEO='-geometry 132x40+200+200'
XTERMGEOH=40
XTERMGEOW=132
XTERMGEOX=200
XTERMGEOY=200
XTERMINIT_LOADED=1
XTERM_LOCALE=C
XTERM_SHELL=/opt/bb/bin/bash
XTERM_VERSION='X.Org 7.6.0(295)'
_=/home/mpersico5/examples/bash/script_caller/outer
__git_eread () 
__git_ps1 () 
__git_ps1_colorize_gitstring () 
__git_ps1_show_upstream () 
_aload () 
_autoload_dump () 
_autoload_edit () 
_autoload_help () 
_autoload_page () 
_autoload_remove () 
_autoload_resolve () 
_autoload_split_fpath () 
_bbsave-dotfile-entry () 
_dirlist_select () 
_git-cd-return () 
_git-cd-to () 
_git-cd-unwind () 
_listkv () 
_rsync2nfs_usage () 
_rsyncvm_usage () 
_save-dotfile-entry () 
_toolkit-file-maint-usage () 
aclear () 
acopy () 
acount () 
add_bb () 
addpath () 
addvm () 
aeach () 
aindicies () 
ajoin () 
apop () 
aptperl () 
apush () 
aset () 
ashift () 
asplice () 
asplit () 
asplit-to-array () 
asplit-to-stdout () 
asplit_to_array () 
asplit_to_stdout () 
aunshift () 
autoload () 
autoload-edit-group () 
autoload_calc_shimsize () 
autoloaded-bloomberg () 
autoloaded-personal () 
autoreload () 
avalues () 
bash_current_version_compare () 
bash_history_index () 
bash_history_reindex () 
bash_history_sync () 
bbadddotfile () 
bbdotfileadd () 
bbdotfilesfuncs-help () 
bbdotfilessync () 
bbgitcheck_bbdotfiles () 
bbgithub-clone () 
bbgithub-merge-pull-request () 
bbgithub-server-version () 
bbgithub-set-locals () 
bbgithub-set-triangle () 
bbgithub-whack () 
bbmakesshconfig () 
bbmakesymlinks () 
bbshowdotfiles () 
bbsyncbbdotfiles () 
cat_history () 
cattail () 
cd+ () 
check-nfsmachines () 
cleandirlist () 
cmd-echo () 
co () 
comment-stream () 
dashstripper () 
delpath () 
delvm () 
devgit-clone () 
devgit-delete-repo () 
dirlist () 
dirlist_usage () 
dotfileadd () 
dotfilessync () 
dowhich () 
dpkg-cancel-request () 
dpkg-list-distros () 
dpkg-list-series () 
dpkg-portal-base-uri () 
dpkg-portal-base-url () 
dpkg-portal-query () 
dpkg-psql () 
dpkg-psql-dump-prod () 
dpkg-psql-load-local () 
dpkg-psql-query-change () 
dpkg-psql-query-change-log () 
dpkg-psql-query-change-log-usage () 
dpkg-psql-start () 
dpkg-test-build () 
dpkg-test-build-usage () 
dpkg-test-rebuild () 
dpkg-test-rebuild-usage () 
dpkgrefrepos () 
dpkgrepo-says () 
eddirlist () 
editor_opt () 
edpath () 
func-echo () 
func-name-spoof () 
func-pick () 
func-usage () 
func-yesno () 
get-next-descriptor () 
git-add-repo-tag () 
git-br () 
git-branch-delete () 
git-branch-get-current () 
git-branch-info () 
git-branch-info-pull-request () 
git-branch-rename () 
git-branches () 
git-cat-cl () 
git-check-hook () 
git-check-with-master () 
git-check-with-remote-usage () 
git-checkout () 
git-checkout-last-existed () 
git-checkout-usage () 
git-clone () 
git-clone-bbgithub () 
git-clone-devgit () 
git-clone-github () 
git-clone-usage () 
git-create-worktree () 
git-delete-branch () 
git-delete-current-repo () 
git-delete-current-worktree () 
git-delete-repo () 
git-delete-repo-bbgithub () 
git-delete-repo-devgit () 
git-delete-repo-github () 
git-delete-repo-usage () 
git-delete-worktree () 
git-delete-worktree-usage () 
git-diff-faq () 
git-diff-to-checkpoint () 
git-diff-two-repos-on-disk-usage () 
git-dry-run-hook () 
git-fetch-remote-branch () 
git-find () 
git-find-conflicts () 
git-find-deleted () 
git-find-git-dir () 
git-find-last-existed () 
git-find-usage () 
git-get-current-branch () 
git-get-current-repo-name () 
git-get-default-remote () 
git-get-stash-count () 
git-go () 
git-go-get-filename () 
git-go-set () 
git-go-set-filename () 
git-grep () 
git-gui () 
git-hold () 
git-hold-clean () 
git-hold-diff () 
git-hold-find () 
git-hold-grep () 
git-hold-list () 
git-hold-remove () 
git-hold-restore () 
git-hook-check () 
git-hook-dry-run () 
git-hook-find-hook-dir () 
git-hook-pull () 
git-hook-push () 
git-in-a-repo () 
git-in-a-worktree () 
git-is-committable () 
git-is-deleted () 
git-is-edited () 
git-is-ignored () 
git-is-mod () 
git-is-modified () 
git-is-staged () 
git-is-unmodified () 
git-is-unstaged () 
git-is-untracked () 
git-list () 
git-log-rebase () 
git-log-shas-range () 
git-logg () 
git-merge-find () 
git-merge-find-branch () 
git-merge-find-usage () 
git-merge-pr () 
git-merge-pull-request () 
git-merge-pull-request-usage () 
git-merge-write () 
git-merge-write-usage () 
git-parse-remote-v () 
git-post-new () 
git-pull () 
git-pull-hook () 
git-pull-usage () 
git-pull-with-checkpoint () 
git-push-hook () 
git-rebase-on-master () 
git-regressive-diffs () 
git-remote-add () 
git-remotes () 
git-rename-branch () 
git-rename-branch-usage () 
git-rename-worktree () 
git-rename-worktree-usage () 
git-restore () 
git-revert () 
git-root () 
git-set-triangle () 
git-set-triangle-github () 
git-set-triangle-usage () 
git-st () 
git-st-ch () 
git-st-cl () 
git-st-ext () 
git-st-ext-all () 
git-st-por () 
git-st-por-usage () 
git-stash-get-count () 
git-strip-repo () 
git-sync-with-master () 
git-sync-with-remote-usage () 
git-to-stdout () 
git-to-stdout-last-existed () 
git-to-stdout-usage () 
git-update () 
git-update-this-hook () 
git-worktree () 
git-worktree-create () 
git-worktree-delete-current () 
git-worktree-diff-from-root () 
git-worktree-diff-to-root () 
git-worktree-fetch () 
git-worktree-rename () 
git-worktree-root () 
git-wt () 
gitcheck_dotfiles () 
gitfuncs_githook_dir=/home/mpersico5/.git_template/hooks
gitfuncs_githook_root=/home/mpersico5/.git_template
gitfuncs_gitroot=/home/mpersico5/gits
gitfuncs_gitroot_MBIG=/home/mpersico5/MBIG
github-clone () 
go () 
govm () 
grep-not-in () 
heach () 
hist-index-unlock () 
hist_with_pwd () 
histinit () 
history () 
hkeys () 
http_proxy=http://devproxy.bloomberg.com:82
https_proxy=http://devproxy.bloomberg.com:82
hvalues () 
is-int () 
is-interactive () 
is-neg () 
is-pos () 
is-redirected () 
is_func_defined () 
list () 
listpath () 
load_history () 
makepstree () 
makesymlinks () 
mount-MBIG () 
mount-nfs () 
mount-sshfs () 
new_history () 
newx () 
no_proxy=.cloud.bloomberg.com,.repo.dob1.bcpc.bloomberg.com,.repo.drr1.bcpc.bloomberg.com,127.0.0.1,169.254.169.254,artifactory.inf.bloomberg.com,artifactory.inf.dev.bloomberg.com,artmirrors.dev.bloomberg.com,artprod.dev.bloomberg.com,attic.ny.cas.inf.bloomberg.com,bbgithub.dev.bloomberg.com,chef-enrollment.ny.cas.inf.bloomberg.com,chef.mirror.inf.bloomberg.com,chef.ny.cas.inf.bloomberg.com,chefdk.mirror.inf.bloomberg.com,cloud-yum-mirrorlist.bdns.bloomberg.com,cloud.bloomberg.com,host-metadata.ny.inf.bloomberg.com,localhost,mirrors.inf.bloomberg.com,openstack.dob1.bcpc.bloomberg.com,openstack.drr1.bcpc.bloomberg.com,rubygems.mirror.dev.bloomberg.com,s3.dev.obdc.bcs.bloomberg.com,s3.dev.rrdc.bcs.bloomberg.com,s3.dob1.bcpc.bloomberg.com,s3.drr1.bcpc.bloomberg.com,sentry.ny.cas.inf.bloomberg.com,supermarket.dev.inf.bloomberg.com,yum-mirror.repo.casob1.bcpc.bloomberg.com,yum-mirror.repo.casrr1.bcpc.bloomberg.com,blp-dpkg.dev.bloomberg.com,blp-dpkg.dev.bloomberg.com,devgit.dev.bloomberg.com
options () 
pathfunc_usage_init () 
pause () 
perl-add-local () 
perl-add-root () 
perl-current-version () 
perl-del-local () 
perl-del-root () 
perl-filter-code () 
perl-find-code () 
perl-list-local () 
perl-list-root () 
perl-module-apt-install () 
perl-module-new-repo () 
perl-module-new-repo-usage () 
perl-module-new-tar () 
perl-module-new-zip () 
perl-script-new-repo () 
perlx () 
pick () 
prunedirlist () 
pwdswap () 
python_dbg () 
readdirlist () 
rename_history () 
repl () 
rsync2nfs () 
rsyncvm-diff () 
rsyncvm-pause () 
rsyncvm-resume () 
rsyncvm-running () 
rsyncvm-snapshot-diff () 
rsyncvmgits () 
safe_func_export () 
scoping_func () 
script-echo () 
script-usage () 
searchpath () 
sep2line () 
set-nfsmachine () 
setdirlist () 
settitle () 
show_current_history () 
show_history () 
showdotfiles () 
showvm () 
simon-says () 
smartwc () 
snapshot-diff () 
snapshot-go () 
snapshot-restore () 
stash_history () 
stderrcho () 
svn-add-repo () 
svn-checkout () 
svn-find () 
svn-get-root () 
svn-go () 
svn-go-get () 
svn-go-set () 
svn-go-set-filename () 
svn-go-usage () 
svn-help () 
svn-review () 
svn-review-update () 
svn-st-por () 
svn-st-por-usage () 
svn-stash () 
svn-strip-repo () 
syncdotfiles () 
tail_number_add () 
tail_number_strip () 
tarcopy () 
tarcp () 
ticker () 
tickercfg () 
tickerkill () 
tkpod () 
toolkit-expire-check () 
toolkit-expires-in () 
toolkit-file-check () 
toolkit-file-maint () 
toolkit-is-expired () 
toolkit-maint () 
umount-MBIG () 
umount-nfs () 
umount-sshfs () 
uniqpath () 
up () 
uuid () 
vm-toolkit-file-maint () 
vmadd () 
vmchoose () 
vmdel () 
vmgo () 
vmrebuild () 
vmshow () 
vmsync () 
wcstrip () 
writedirlist () 
x-current-root-guts () 
x-current-root-height () 
x-current-root-width () 
x-is-available () 
xterm_Xground () 
xterm_Xground_map_rgb000000000000=black
xterm_Xground_map_rgb000000008b8b=darkblue
xterm_Xground_map_rgb2e2e8b8b5757=green
xterm_Xground_map_rgb46468282b4b4=blue
xterm_Xground_map_rgb8b8b00000000=red
xterm_Xground_map_rgba5a52a2a2a2a=brown
xterm_Xground_map_rgba9a9a9a9a9a9=grey
xterm_Xground_map_rgbd2d269691e1e=choc
xterm_Xground_map_rgbf5f5dedeb3b3=wheat
xterm_Xground_map_rgbffff00000000=brightred
xterm_Xground_map_rgbffffa5a50000=orange
xterm_Xground_map_rgbffffc0c0cbcb=pink
xterm_Xground_map_rgbffffffff0000=yellow
xterm_Xground_map_rgbffffffffffff=white
xterm_background () 
xterm_foreground () 
yesno () 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}";
}";
}";
}";
