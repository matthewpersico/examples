# -*- sh -*-
# shellcheck shell=bash

iii=outside
echo " iii at top=$iii"
declare diii=outside
echo "diii at top=$diii"
top_level_var='top_level_var'
# shellcheck disable=SC2120
func1 ()
{
    iii=func1
    echo " iii set in func1=$iii"
    declare diii=func1
    echo "diii set in func1=$diii"
    local indent=$1
    local func_declared_twice='func_declared_twice, set in func1'
    local func1_var='func1_var'
    declare declared='func1_declared'
    local localed='func1_localed'
    echo "${indent}${FUNCNAME[0]}: top_level_var='$top_level_var'"
    echo "${indent}${FUNCNAME[0]}: func1_var='$func1_var'"
    echo "${indent}${FUNCNAME[0]}: func2_var='$func2_var'"
    echo "${indent}${FUNCNAME[0]}: declared='$declared'"
    echo "${indent}${FUNCNAME[0]}: localed='$localed'"
    echo "${indent}${FUNCNAME[0]}: func_declared_twice='$func_declared_twice'"
    echo "${indent}${FUNCNAME[0]}: ${FUNCNAME[*]} (${#FUNCNAME[@]})"
    local idx=${#FUNCNAME[@]};((idx-=1))
    echo "${indent}${FUNCNAME[0]}: Topmost ($idx) = ${FUNCNAME[$idx]}"
    echo "${indent}${FUNCNAME[0]}: Bottommost (0) = ${FUNCNAME[0]}"

    top_level_var='changed in func1'
    func2 '    '
    echo " iii after func2 in func 1=$iii"
    echo "diii after func2 in func 1=$diii"

    echo "${indent}${FUNCNAME[0]}: top_level_var='$top_level_var'"
    echo "${indent}${FUNCNAME[0]}: func1_var='$func1_var'"
    echo "${indent}${FUNCNAME[0]}: func2_var='$func2_var'"
    echo "${indent}${FUNCNAME[0]}: declared='$declared'"
    echo "${indent}${FUNCNAME[0]}: localed='$localed'"
    echo "${indent}${FUNCNAME[0]}: func_declared_twice='$func_declared_twice'"
    echo "${indent}${FUNCNAME[0]}: ${FUNCNAME[*]} (${#FUNCNAME[@]})"
    local idx=${#FUNCNAME[@]};((idx-=1))
    echo "${indent}${FUNCNAME[0]}: Topmost = ${FUNCNAME[$idx]}"
    echo "${indent}${FUNCNAME[0]}: Bottommost (0) = ${FUNCNAME[0]}"
}

func2 ()
{
    iii=func2
    echo " iii set in func2=$iii"
    declare diii=func2
    echo "diii set in func2=$diii"
    local indent=$1
    local func_declared_twice='func_declared_twice, set in func2'
    local func2_var='func2_var'
    func1_var='func1_var changed in func2'
    echo "${indent}${FUNCNAME[0]}: top_level_var='$top_level_var'"
    echo "${indent}${FUNCNAME[0]}: func1_var='$func1_var'"
    echo "${indent}${FUNCNAME[0]}: func2_var='$func2_var'"
    echo "${indent}${FUNCNAME[0]}: declared='$declared'"
    echo "${indent}${FUNCNAME[0]}: localed='$localed'"
    echo "${indent}${FUNCNAME[0]}: func_declared_twice='$func_declared_twice'"
    echo "${indent}${FUNCNAME[0]}: ${FUNCNAME[*]} (${#FUNCNAME[@]})"
    local idx=${#FUNCNAME[@]};((idx-=1))
    echo "${indent}${FUNCNAME[0]}: Topmost = ${FUNCNAME[$idx]}"
    echo "${indent}${FUNCNAME[0]}: Bottommost (0) = ${FUNCNAME[0]}"
}

echo " iii after func def=$iii"
echo "diii after func def=$diii"

echo "${indent}script, before func1 call: top_level_var='$top_level_var'"
echo "${indent}script, before func1 call: func1_var='$func1_var'"
echo "${indent}script, before func1 call: func2_var='$func2_var'"
echo "${indent}script, before func1 call: declared='$declared'"
echo "${indent}script, before func1 call: localed='$localed'"
echo "${indent}script, before func1 call: func_declared_twice='$func_declared_twice'"
echo

# shellcheck disable=SC2119
func1
echo
echo " iii after func1 call outer=$iii"
echo "diii after func1 call outer=$diii"

func2
echo
echo " iii after func2 call outer=$iii"
echo "diii after func2 call outer=$diii"

echo "${indent}script, after func1 call: top_level_var='$top_level_var'"
echo "${indent}script, after func1 call: func1_var='$func1_var'"
echo "${indent}script, after func1 call: func2_var='$func2_var'"
echo "${indent}script, after func1 call: declared='$declared'"
echo "${indent}script, after func1 call: localed='$localed'"
echo "${indent}script, after func1 call: func_declared_twice='$func_declared_twice'"

echo "() vs {}"

function returntester_braces ()
{
    false || { echo "failure in ${FUNCNAME[0]}" && return 43; }
    echo "${FUNCNAME[0]}: We shouldn't be here and status=$?"
}

function returntester_parens ()
{
    false || ( echo "failure in ${FUNCNAME[0]}" && return 53 )
    echo "${FUNCNAME[0]}: We shouldn't be here and return status=$?"
    false || ( echo "failure in ${FUNCNAME[0]}" && exit 54 )
    echo "${FUNCNAME[0]}: We shouldn't be here and exit status=$?"
}

echo "calling returntester_braces..."
returntester_braces
echo "back from returntester_braces and status=$?"
echo
echo "calling returntester_parens"
returntester_parens
echo "back from returntester_parens and status=$?"


declare loopvarmatch

for loopvarmatch in a b c
do
    if [[ $loopvarmatch == 'b' ]]
    then
        break
    fi
done
echo "loopvarmatch after loop is '$loopvarmatch' (should be 'b')"

declare loopvarnomatch

for loopvarnomatch in a b c
do
    if [[ $loopvarnomatch == '47' ]]
    then
        break
    fi
done
echo "loopvarnomatch after loop is '$loopvarnomatch' (should be 'c')"
